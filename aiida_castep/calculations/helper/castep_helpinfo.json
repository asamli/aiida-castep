{"md_extrap_fit": {"key_type": "PARAM", "help_short": "MD extrapolation parameters scheme", "help_full": "             MD_EXTRAP_FIT   *! MD extrapolation parameters scheme!*\n\nType: Boolean (Logical)                                            Level: Basic\n\nSpecifies whether to calculate best-fit parameters (=TRUE) for use in the  wavefunction extrapolation scheme or use constant parameters (=FALSE) from  Taylor expansion instead.\nModifiable: restart only\nAllowed values: TRUE or FALSE\nDefault value : TRUE\n\n", "key_level": "basic", "value_type": "boolean"}, "elnes_perc_extra_bands": {"key_type": "PARAM", "help_short": "percentage of extra bandstructure bands", "help_full": "      ELNES_PERC_EXTRA_BANDS   *! percentage of extra bandstructure bands!*\n\nType: Real                                                  Level: Intermediate\n\nThe percentage of extra bands in an optical matrix elements calculation.\nModifiable: restart and on the fly\nAllowed values: (any) >= 0.0\nDefault value : 0.0\n\n", "key_level": "intermediate", "value_type": "real"}, "spin_unit": {"key_type": "PARAM", "help_short": "unit of spin in output", "help_full": "                     SPIN_UNIT   *! unit of spin in output!*\n\nType: String                                                Level: Intermediate\n\nControls the units used for all spins in output.\nModifiable: restart and on the fly\nAllowed values: HBAR/2, HBAR, MAGNETON (or muB)\nDefault value : HBAR/2\n\n", "key_level": "intermediate", "value_type": "string"}, "write_cif_structure": {"key_type": "PARAM", "help_short": "output final structure in CIF format", "help_full": "         WRITE_CIF_STRUCTURE   *! output final structure in CIF format!*\n\nType: Boolean (Logical)                                            Level: Basic\n\nSpecifies whether or not to write the final structure in a CIF file format.\nModifiable: restart and on the fly\nAllowed values: TRUE or FALSE\nDefault value : FALSE\n\n", "key_level": "basic", "value_type": "boolean"}, "spectral_re_est_k_scrn": {"key_type": "PARAM", "help_short": "re-estimate k-screening length before spectral run", "help_full": " SPECTRAL_RE_EST_K_SCRN   *! re-estimate k-screening length before spectral run !\n\nType: Boolean (Logical)                                     Level: Intermediate\n\n(See description of NLXC_RE_EST_K_SCRN). If this is true then the screening length  will be re-estimated from the density before an electronic spectroscopy calculation.\n(If NLXC_RE_EST_K_SCRN is also true then this should have no effect.)\nModifiable: restart only\nAllowed values: TRUE or FALSE\nDefault value : FALSE\n\n", "key_level": "intermediate", "value_type": "boolean"}, "tddft_xc_definition": {"key_type": "PARAM", "help_short": "tddft exchange-correlation functional", "help_full": "        TDDFT_XC_DEFINITION   *! tddft exchange-correlation functional!*\n\nType: Block                                                        Level: Basic\n\nThe functional to use when calculating the exchange-correlation potential during\na tddft calculation.\nThis version is a BLOCK keyword, with the flexibility to allow an arbitrary\nmixing of any of the basic TDDFT_XC_FUNCTIONAL components.\nBasic format: a series of separate lines, each containing <func> <weight>\nwhere <func> is the appropriate kernel for either eXchange or Correlation or both\nand <weight> is supposed to add to 1.0 for both eXchange and Correlation.\nModifiable: restart only\nDefault value : set by XC_FUNCTIONAL\n\n", "key_level": "basic", "value_type": "block"}, "phonon_kpoint_path_spacing": {"key_type": "CELL", "help_short": "Phonon dispersion path spacing", "help_full": "        PHONON_KPOINT_PATH_SPACING   *! Phonon dispersion path spacing !*\n\nType: Physical                                                     Level: Basic\n\nThe maximum spacing between mycell%kpoints along the path specified by PHONON_KPOINT_PATH.  Units of inverse length must be specified.  Default value: 0.1 1/ang.\n", "key_level": "basic", "value_type": "physical"}, "nlxc_k_scrn_den_function": {"key_type": "PARAM", "help_short": "OBSOLETE", "help_full": "                    NLXC_K_SCRN_DEN_FUNCTION   *! OBSOLETE !*\n\nType: String                                                Level: Intermediate\n\nNB This keyword has been removed.\n\n", "key_level": "intermediate", "value_type": "string"}, "backup_interval": {"key_type": "PARAM", "help_short": "seconds between backups", "help_full": "                 BACKUP_INTERVAL   *! seconds between backups!*\n\nType: Integer                                               Level: Intermediate\n\nSpecifies the interval, in seconds, between backups of all data for restarts,  for a geometry optimization/molecular dynamics/phonon run - if less than or  equal to zero then no timed backups.\nModifiable: restart and on the fly\nAllowed values: (any)\nDefault value : 0\n\n", "key_level": "intermediate", "value_type": "integer"}, "geom_use_linmin": {"key_type": "PARAM", "help_short": "line minimiser on/off", "help_full": "                  GEOM_USE_LINMIN   *! line minimiser on/off!*\n\nType: Boolean (Logical)                                     Level: Intermediate\n\nSpecifies whether or not to perform line minimisation within a geometry optimisation.\nModifiable: restart and on the fly\nAllowed values: TRUE or FALSE\nDefault value : TRUE\n\n", "key_level": "intermediate", "value_type": "boolean"}, "thermo_calculate_helmholtz": {"key_type": "PARAM", "help_short": "Calculate Helmholtz free energy", "help_full": "       THERMO_CALCULATE_HELMHOLTZ   *! Calculate Helmholtz free energy !*\n\nType: Boolean (Logical)                                     Level: Intermediate\n\nSpecifies whether or not to calculate the Helmholtz free energy.\nModifiable: restart and on the fly\nAllowed values: TRUE or FALSE\nDefault value : TRUE\n\n", "key_level": "intermediate", "value_type": "boolean"}, "md_ensemble": {"key_type": "PARAM", "help_short": "MD ensemble", "help_full": "                         MD_ENSEMBLE   *! MD ensemble!*\n\nType: String                                                       Level: Basic\n\nThe ensemble for the molecular dynamics run.\nModifiable: restart only\nAllowed values: NVE, NVT, NPH, NPT, HUG\nDefault value : NVE\n\n", "key_level": "basic", "value_type": "string"}, "phonon_convergence_win": {"key_type": "PARAM", "help_short": "convergence tolerance window in LR", "help_full": "        PHONON_CONVERGENCE_WIN   *! convergence tolerance window in LR!*\n\nType: Integer                                               Level: Intermediate\n\nThe LR convergence criteria must be met for PHONON_CONVERGENCE_WIN iterations  before acceptance.\nModifiable: restart and on the fly\nAllowed values: (any integer) >= 2\nDefault value : 3 if PHONON_DFPT_METHOD=DM, or 2 otherwise\n\n", "key_level": "intermediate", "value_type": "integer"}, "spin_fix": {"key_type": "PARAM", "help_short": "max number of fixed spin SCF cycles", "help_full": "               SPIN_FIX   *! max number of fixed spin SCF cycles!*\n\nType: Integer                                               Level: Intermediate\n\nOnly relevant for a FIX_OCCUPANCY=FALSE calculation.\nThe total spin is held constant for SPIN_FIX SCF cycles (or less if electronic\nconvergence criteria met with the fixed spin) and then allowed to relax.\nIf SPIN_FIX<0 then the total spin is held constant for all SCF cycles.\nModifiable: never\nAllowed values: (any integer)\nDefault value : 10\n\n", "key_level": "intermediate", "value_type": "integer"}, "ir_intensity_unit": {"key_type": "PARAM", "help_short": "unit of IR intensity in output", "help_full": "             IR_INTENSITY_UNIT   *! unit of IR intensity in output!*\n\nType: String                                                Level: Intermediate\n\nControls the units used for all IR intensities in output - many different  units are supported.\nModifiable: restart and on the fly\nDefault value : DEBYE**2/ANG**2/AMU\n\n", "key_level": "intermediate", "value_type": "string"}, "charge": {"key_type": "PARAM", "help_short": "net charge", "help_full": "                            CHARGE   *! net charge!*\n\nType: Real                                                         Level: Basic\n\nNet charge of the system.  Not restricted to integer values. Can be used instead of NELECTRONS.\nModifiable: never\nAllowed values: (any)\nDefault value : 0.0\n\n", "key_level": "basic", "value_type": "real"}, "ionic_velocities": {"key_type": "CELL", "help_short": "Initial ionic velocities", "help_full": "                IONIC_VELOCITIES   *! Initial ionic velocities !*\n\nType: Block                                                        Level: Basic\n\nThe initial velocities of the ions used in a molecular dynamics simulation.  Optionally, units of velocity may be specified.\nExample:\n%block ionic_velocities\nang/ps\n0.3 0.0 0.0 ! Initialise this atom with a velocity\n0.0 0.0 0.0\n0.0 0.0 0.0\n%endblock ionic_velocities\nDefault value: 0.0 ang/ps\n", "key_level": "basic", "value_type": "block"}, "optics_kpoints_mp_spacing": {"key_type": "CELL", "help_short": "Optics Monhurst-Pack grid density of points", "help_full": "  OPTICS_KPOINTS_MP_SPACING   *! Optics Monhurst-Pack grid density of points !*\n\nType: Physical                                                     Level: Basic\n\nThe k-point density of a Monkhorst-Pack grid used when calculating optical properties.  Units of inverse length must be specified.\nExample:\noptics_kpoints_mp_spacing 0.05 1/ang\n\nDefault value: 0.1 1/ang\n", "key_level": "basic", "value_type": "physical"}, "efield_dfpt_method": {"key_type": "PARAM", "help_short": "EFIELD DFPT solver method", "help_full": "              EFIELD_DFPT_METHOD   *! EFIELD DFPT solver method !*\n\nType: String                                                Level: Intermediate\n\nSelects the solver for Efield density functional perturbation theory.\nModifiable: restart only\nAllowed values: ALLBANDS(=VARIATIONAL) or DM(=GREEN) to select Gonze  variational or Baroni Green function with DM solver.\nDefault value : ALLBANDS\n\n", "key_level": "intermediate", "value_type": "string"}, "spectral_kpoints_path_spacing": {"key_type": "CELL", "help_short": "Alias for SPECTRAL_KPOINT_PATH_SPACING", "help_full": "  SPECTRAL_KPOINTS_PATH_SPACING   *! Alias for SPECTRAL_KPOINT_PATH_SPACING !*\n\nType: Physical                                                     Level: Basic\n\nDefault value: Determined from SPECTRAL_KPOINT_PATH_SPACING\n", "key_level": "basic", "value_type": "physical"}, "nlxc_calc_full_ex_pot": {"key_type": "PARAM", "help_short": "calculate full exchange potential matrix", "help_full": "     NLXC_CALC_FULL_EX_POT   *! calculate full exchange potential matrix !*\n\nType: Boolean (Logical)                                     Level: Intermediate\n\nDetermines whether to calculate the full exchange potential matrix (avoids  copying) or to only calculate top half and then copy the conjugate onto the  bottom half. This copying may become inefficient when running in parallel  with bad latency, hence the switch.\nModifiable: restart only\nAllowed values: TRUE or FALSE\nDefault value : FALSE\n\n", "key_level": "intermediate", "value_type": "boolean"}, "tssearch_disp_tol": {"key_type": "PARAM", "help_short": "displacement convergence tolerance in QST search", "help_full": "    TSSEARCH_DISP_TOL   *! displacement convergence tolerance in QST search!*\n\nType: Physical                                                     Level: Basic\n\nTolerance for accepting convergence of the maximum |ionic displacement|  during QST search.\nModifiable: restart and on the fly\nAllowed values: (any) > 0.0\nDefault value : 0.01 BOHR\n\n", "key_level": "basic", "value_type": "physical"}, "bs_max_cg_steps": {"key_type": "PARAM", "help_short": "maximum CG steps in band structure calculation", "help_full": "      BS_MAX_CG_STEPS   *! maximum CG steps in band structure calculation!*\n\nType: Integer                                               Level: Intermediate\n\nThe maximum number of conjugate-gradient steps to take in the electronic  minimizer, before resetting to the steepest descents direction, when doing a  band structure calculation.\nModifiable: restart and on the fly\nAllowed values: (any integer) > 0\nDefault value : 25 (or 5 if TASK=MAGRES or PHONON etc)\n\n", "key_level": "intermediate", "value_type": "integer"}, "spectral_kpoint_list": {"key_type": "CELL", "help_short": "Spectral properties k-point list", "help_full": "          SPECTRAL_KPOINT_LIST   *! Spectral properties k-point list !*\n\nType: Block                                                        Level: Basic\n\nA list of discrete k-points and weights at which the spectral properties will be calculated.\nExample:\n%block spectral_kpoint_list\n0.25  0.25  0.25  0.25\n0.25  0.25 -0.25  0.25\n0.25 -0.25  0.25  0.25\n0.25 -0.25 -0.25  0.25\n%endblock spectral_kpoint_list\n\nDefault value: SCF k-points are used if SPECTRAL_KPOINT_* k-point specifier is not given.\n", "key_level": "basic", "value_type": "block"}, "sedc_sr_jchs": {"key_type": "PARAM", "help_short": "SR value for JCHS semi-empirical dispersion/vdW correction scheme", "help_full": " SEDC_SR_JCHS   *! SR value for JCHS semi-empirical dispersion/vdW correction sch\n\nType: Real                                                        Level: Expert\n\nCustomisable SR value for the damping function in the JCHS  semi-empirical dispersion/van der Waals correction scheme.\nModifiable: restart and on the fly\nDefault is determined by XC_FUNCTIONAL.\n\n", "key_level": "expert", "value_type": "real"}, "bs_max_iter": {"key_type": "PARAM", "help_short": "maximum iterations in band structure calculation", "help_full": "       BS_MAX_ITER   *! maximum iterations in band structure calculation!*\n\nType: Integer                                                      Level: Basic\n\nDetermines the maximum number of iterations to perform when calculating band structure.\nModifiable: restart and on the fly\nAllowed values: (any integer) > 0\nDefault value : 60 (or 240 if TASK=PHONON etc)\n\n", "key_level": "basic", "value_type": "integer"}, "magres_xc_definition": {"key_type": "PARAM", "help_short": "magres exchange-correlation functional", "help_full": "       MAGRES_XC_DEFINITION   *! magres exchange-correlation functional!*\n\nType: Block                                                        Level: Basic\n\nThe functional to use when calculating the exchange-correlation potential during\na magres calculation.\nThis version is a BLOCK keyword, with the flexibility to allow an arbitrary\nmixing of any of the basic MAGRES_XC_FUNCTIONAL components.\nBasic format: a series of separate lines, each containing <func> <weight>\nwhere <func> is the appropriate kernel for either eXchange or Correlation or both\nand <weight> is supposed to add to 1.0 for both eXchange and Correlation.\nModifiable: restart only\nDefault value : set by XC_FUNCTIONAL\n\n", "key_level": "basic", "value_type": "block"}, "bs_eigenvalue_tol": {"key_type": "PARAM", "help_short": "band convergence tolerance", "help_full": "               BS_EIGENVALUE_TOL   *! band convergence tolerance!*\n\nType: Physical                                                     Level: Basic\n\nTolerance for accepting convergence of a single eigenvalue/band during  bandstructure calculation. The difference between max and min energies over  current_params%elec_convergence_win iterations must be less than this.\nModifiable: restart and on the fly\nAllowed values: (any) > 0.0\nDefault value : 10^-6 eV/eigenvalue (or 10^-9 eV/eval if TASK=MAGRES or PHONON etc)\n\n", "key_level": "basic", "value_type": "physical"}, "bs_kpoints_path": {"key_type": "CELL", "help_short": "Alias for BS_KPOINT_PATH", "help_full": "                BS_KPOINTS_PATH   *! Alias for BS_KPOINT_PATH !*\n\nType: Block                                                        Level: Basic\n\nDefault value: Determined from BS_KPOINT_PATH\n", "key_level": "basic", "value_type": "block"}, "bs_kpoint_list": {"key_type": "CELL", "help_short": "Band structure k-point list", "help_full": "               BS_KPOINT_LIST   *! Band structure k-point list !*\n\nType: Block                                                        Level: Basic\n\nA list of discrete k-points at which the band structure will be calculated  Example:\n%block bs_kpoint_list\n0.00000000   0.00000000   0.00000000 ! A path from Gamma to X\n0.10000000   0.00000000   0.00000000\n0.20000000   0.00000000   0.00000000\n0.30000000   0.00000000   0.00000000\n0.40000000   0.00000000   0.00000000\n0.50000000   0.00000000   0.00000000\n%endblock bs_kpoint_list\n\nDefault value: SCF k-points are used if BS_KPOINT_* k-point specifier is not given.\n", "key_level": "basic", "value_type": "block"}, "elnes_kpoint_mp_offset": {"key_type": "CELL", "help_short": "Origin offset of the ELNES (core level spectroscopy) MP grid", "help_full": " ELNES_KPOINT_MP_OFFSET   *! Origin offset of the ELNES (core level spectroscopy)\n\nType: Real Vector                                                  Level: Basic\n\nThe offset of the Monkhorst-Pack grid that ELNES (core level spectroscopy) properties are calculated.\n", "key_level": "basic", "value_type": "real"}, "atomic_init": {"key_type": "CELL", "help_short": "Dummy", "help_full": "                            ATOMIC_INIT   *! Dummy !*\n\nType: Defined                                                      Level: Dummy\n\nNo action\n", "key_level": "dummy", "value_type": "defined"}, "tddft_eigenvalue_method": {"key_type": "PARAM", "help_short": "TDDFT matrix solution method", "help_full": "           TDDFT_EIGENVALUE_METHOD   *! TDDFT matrix solution method!*\n\nType: String                                                       Level: Basic\n\nSelects which method is used to obtain the eigenvalues of the TDDFT matrix.\nModifiable: restart and on the fly\nAllowed values: CG, DAVIDSON\nDefault value : DAVIDSON\n\n", "key_level": "basic", "value_type": "string"}, "md_cell_t": {"key_type": "PARAM", "help_short": "MD characteristic cell time", "help_full": "                  MD_CELL_T   *! MD characteristic cell time!*\n\nType: Physical                                                     Level: Basic\n\nUsed to set relevant MD barostat parameters, e.g. Nose-Hoover barostat mass  or Langevin damping time.\nModifiable: restart only\nAllowed values: (any) > 0.0\nDefault value : 10*MD_ION_T\n\n", "key_level": "basic", "value_type": "physical"}, "geom_linmin_tol": {"key_type": "PARAM", "help_short": "line minimizer tolerance", "help_full": "                 GEOM_LINMIN_TOL   *! line minimizer tolerance!*\n\nType: Real                                                  Level: Intermediate\n\nTolerance for accepting line minimisation within a geometry optimisation -  if proposed optimal (dimensionless) step length is within tolerance of last  attempted step then last step will be accepted.\nModifiable: restart and on the fly\nAllowed values: 0.0 < (any) 1.0\nDefault value : 0.4\n\n", "key_level": "intermediate", "value_type": "real"}, "quantization_axis": {"key_type": "CELL", "help_short": "quantisation (magnetization) axis in fractional coordinates", "help_full": " QUANTIZATION_AXIS   *! quantisation (magnetization) axis in fractional coordinat\n\nType: Real Vector                                                  Level: Basic\n\nDefault value: along c vector\n", "key_level": "basic", "value_type": "real"}, "nlxc_exchange_reflect_kpts": {"key_type": "PARAM", "help_short": "assume time reversal symmetry when calculating Vxc", "help_full": " NLXC_EXCHANGE_REFLECT_KPTS   *! assume time reversal symmetry when calculating V\n\nType: Boolean (Logical)                                     Level: Intermediate\n\nSpecifies whether or not to assume that the wavefunction is time-reversal  symmetric - i.e. c(k+G)=c*(-k-G)\n=>  only sum over one half of the Brillouin zone.\nNB Not done for Gamma point as unnecessary and inefficient.\nModifiable: restart only\nAllowed values: TRUE or FALSE\nDefault value : TRUE\n\n", "key_level": "intermediate", "value_type": "boolean"}, "md_xlbomd_history": {"key_type": "PARAM", "help_short": "XL-BOMD history length", "help_full": "                 MD_XLBOMD_HISTORY   *! XL-BOMD history length!*\n\nType: Integer                                               Level: Intermediate\n\nThis specifies the number of stored wavefunctions (and densities if using DM) in the  XL-BOMD evolution scheme.\nModifiable: restart only\nAllowed values: 0 or 3 <= (integer) <= 9\nDefault value : 0\n\n", "key_level": "intermediate", "value_type": "integer"}, "optics_nbands": {"key_type": "PARAM", "help_short": "number of bands in optics calculation", "help_full": "           OPTICS_NBANDS   *! number of bands in optics calculation!*\n\nType: Integer                                               Level: Intermediate\n\nDetermines the number of bands in an optical matrix elements calculation.\nModifiable: restart and on the fly\nAllowed values: (any integer) >= MAX(NUP,NDOWN)\nDefault value : NBANDS + (5*SQRT(NBANDS) or OPTICS_NEXTRA_BANDS or OPTICS_PERC_EXTRA_BANDS)\n\n", "key_level": "intermediate", "value_type": "integer"}, "phonon_supercell_matrix": {"key_type": "CELL", "help_short": "Supercell matrix for finite difference phonon calculations", "help_full": " PHONON_SUPERCELL_MATRIX   *! Supercell matrix for finite difference phonon calcu\n\nType: Block                                                        Level: Basic\n\nThe supercelling matrix for force constant matrix calculations. The supercell matrix is specified by a 3x3 integer matrix which gives the supercell used in finite-difference phonon calculations.\n", "key_level": "basic", "value_type": "block"}, "magres_jcoupling_task": {"key_type": "PARAM", "help_short": "JCOUPLING run type", "help_full": "                 MAGRES_JCOUPLING_TASK   *! JCOUPLING run type!*\n\nType: String                                                       Level: Basic\n\nSelects which spin coupling terms to compute.\nModifiable: restart and on the fly\nAllowed values: FC, SPIN, ORBITAL, ALL\nDefault value : ALL\n\n", "key_level": "basic", "value_type": "string"}, "md_xlbomd": {"key_type": "PARAM", "help_short": "XL-BOMD on/off", "help_full": "                         MD_XLBOMD   *! XL-BOMD on/off!*\n\nType: Boolean (Logical)                                            Level: Basic\n\nSpecifies whether to use eXtended Lagrangian Born-Oppenheimer MD (XL-BOMD) instead of  wavefunction extrapolation scheme.\nModifiable: restart only\nAllowed values: TRUE or FALSE\nDefault value : FALSE\n\n", "key_level": "basic", "value_type": "boolean"}, "nlxc_div_corr_s_width": {"key_type": "PARAM", "help_short": "width of envelope function", "help_full": "            NLXC_DIV_CORR_S_WIDTH   *! width of envelope function !*\n\nType: Physical                                                    Level: Expert\n\nWidth of the envelope function used to define the integrand for the  divergence correction.\nModifiable: restart only\nAllowed values: (any) > 0.0\nDefault value : 2.25\n\n", "key_level": "expert", "value_type": "physical"}, "md_opt_damped_delta_t": {"key_type": "PARAM", "help_short": "optimal time step for damped MD", "help_full": "          MD_OPT_DAMPED_DELTA_T   *! optimal time step for damped MD!*\n\nType: Boolean (Logical)                                            Level: Basic\n\nSpecifies whether to attempt to calculate an optimum time step (=TRUE) within  damped MD (geometry optimization) or use normal MD timestep (=FALSE).\nModifiable: restart only\nAllowed values: TRUE or FALSE\nDefault value : FALSE\n\n", "key_level": "basic", "value_type": "boolean"}, "bs_kpoint_path": {"key_type": "CELL", "help_short": "Band structure path", "help_full": "                   BS_KPOINT_PATH   *! Band structure path !*\n\nType: Block                                                        Level: Basic\n\nThe continuous path through the BZ on which the band structure is calculated.  This is specified in fractional coordinates.\nExample:\n%block bs_kpoint_path\n0.37500000   0.37500000   0.75000000\n0.50000000   0.50000000   0.50000000\n0.50000000   0.00000000   0.50000000\n0.00000000   0.00000000   0.00000000\n0.37500000   0.37500000   0.75000000\n0.50000000   0.50000000   0.50000000\n0.00000000   0.00000000   0.00000000\n%endblock bs_kpoint_path\n\nDefault value: None\n", "key_level": "basic", "value_type": "block"}, "phonon_fine_method": {"key_type": "PARAM", "help_short": "fine phonon calculation method", "help_full": "            PHONON_FINE_METHOD   *! fine phonon calculation method !*\n\nType: String                                                       Level: Basic\n\nSelects which calculation method to use for phonon calculation on a fine grid.\nModifiable: restart only\nAllowed values: NONE, SUPERCELL, INTERPOLATE\nDefault value : SUPERCELL if TASK=THERMODYNAMICS else NONE\n\n", "key_level": "basic", "value_type": "string"}, "elnes_eigenvalue_tol": {"key_type": "PARAM", "help_short": "band convergence tolerance", "help_full": "             ELNES_EIGENVALUE_TOL   *! band convergence tolerance!*\n\nType: Physical                                                     Level: Basic\n\nTolerance for accepting convergence of a single eigenvalue/band during  ELNES calculation. The difference between max and min energies over  current_params%elec_convergence_win iterations must be less than this.\nModifiable: restart and on the fly\nAllowed values: (any) > 0.0\nDefault value : 10^-6 eV/eigenvalue\n\n", "key_level": "basic", "value_type": "physical"}, "md_ion_t": {"key_type": "PARAM", "help_short": "MD characteristic ionic time", "help_full": "                  MD_ION_T   *! MD characteristic ionic time!*\n\nType: Physical                                              Level: Intermediate\n\nUsed to set relevant MD thermostat parameters, e.g. Nose-Hoover or Hoover-Langvein  thermostat mass or Langevin damping time.\nModifiable: restart only\nAllowed values: (any) > 0.0\nDefault value : if MD_THERMOSTAT=NOSE-HOOVER or HOOVER-LANGEVIN then 10*MD_DELTA_T\nelse 100*MD_DELTA_T\n\n", "key_level": "intermediate", "value_type": "physical"}, "phonon_energy_tol": {"key_type": "PARAM", "help_short": "E(2) convergence tolerance in LR", "help_full": "            PHONON_ENERGY_TOL   *! E(2) convergence tolerance in LR!*\n\nType: Physical                                                     Level: Basic\n\nTolerance for accepting convergence of the force constants during PHONON  calculation. The difference between max and min E(2) values over  current_params%phonon_convergence_win iterations must be less than this.\nModifiable: restart and on the fly\nAllowed values: (any) > 0.0\nDefault value : 10^-5 eV/ANG*ANG\n\n", "key_level": "basic", "value_type": "physical"}, "optics_nextra_bands": {"key_type": "PARAM", "help_short": "number of extra optics bands", "help_full": "             OPTICS_NEXTRA_BANDS   *! number of extra optics bands!*\n\nType: Integer                                               Level: Intermediate\n\nThe number of extra bands in an optical matrix elements calculation.\nModifiable: restart and on the fly\nAllowed values: (any integer) >= 0\nDefault value : 0\n\n", "key_level": "intermediate", "value_type": "integer"}, "cml_filename": {"key_type": "PARAM", "help_short": "Withdrawn", "help_full": "                          CML_FILENAME   *! Withdrawn!*\n\nType: String                                                       Level: Basic\n\nWithdrawn. CML output filename is now determined automatically from SEEDNAME if CML_OUTPUT is TRUE.\n\n", "key_level": "basic", "value_type": "string"}, "mix_charge_amp": {"key_type": "PARAM", "help_short": "charge density mixing amplitude", "help_full": "              MIX_CHARGE_AMP   *! charge density mixing amplitude!*\n\nType: Real                                                  Level: Intermediate\n\nDetermines the mixing amplitude of the charge density within DM scheme.\nModifiable: restart only\nAllowed values: (any) > 0.0\nDefault value : 0.8\n\n", "key_level": "intermediate", "value_type": "real"}, "nlxc_page_ex_pot": {"key_type": "PARAM", "help_short": "page exchange potentials to disk", "help_full": "            NLXC_PAGE_EX_POT   *! page exchange potentials to disk!*\n\nType: Integer                                               Level: Intermediate\n\nControls the paging of exchange potentials to disk.\nIf >0, then all exchange potentials  greater than given size (in MB) will be  paged to disk.\nIf =0, then no paging will be done.\nIf <0, then all exchange potentials, regardless of size, will be paged to disk.\nModifiable: restart only\nAllowed values: (any integer)\nDefault value : 0\n\n", "key_level": "intermediate", "value_type": "integer"}, "spectral_kpoint_path": {"key_type": "CELL", "help_short": "Spectral properties k-point path", "help_full": "          SPECTRAL_KPOINT_PATH   *! Spectral properties k-point path !*\n\nType: Block                                                        Level: Basic\n\nThe continuous path through the BZ on which the spectral properties are calculated.  This is specified in fractional coordinates.  Default value: None\n", "key_level": "basic", "value_type": "block"}, "excited_state_scissors": {"key_type": "PARAM", "help_short": "\"scissors\" operator band-gap correction", "help_full": "      EXCITED_STATE_SCISSORS   *! \"scissors\" operator band-gap correction!*\n\nType: Physical                                              Level: Intermediate\n\nEffectively adds an offset to conduction-band eigenvalues as empirical  correction for LDA/GGA underestimation of band-gaps.\nModifiable: restart and on the fly\nAllowed values: (any)\nDefault value : 0.0\n\n", "key_level": "intermediate", "value_type": "physical"}, "max_sd_steps": {"key_type": "PARAM", "help_short": "max. number of steepest descent steps", "help_full": "            MAX_SD_STEPS   *! max. number of steepest descent steps!*\n\nType: Integer                                               Level: Intermediate\n\nThe maximum number of steepest descent steps in an SCF cycle.\nModifiable: restart and on the fly\nAllowed values: (any integer) >=0\nDefault value : set by ELECTRONIC_MINIMIZER\n\n", "key_level": "intermediate", "value_type": "integer"}, "phonon_const_basis": {"key_type": "PARAM", "help_short": "Withdrawn", "help_full": "                      PHONON_CONST_BASIS   *! Withdrawn !*\n\nType: Boolean (Logical)                                            Level: Basic\n\nWithdrawn keyword.\n\n", "key_level": "basic", "value_type": "boolean"}, "md_pathint_staging": {"key_type": "PARAM", "help_short": "PIMD staging modes on/off", "help_full": "               MD_PATHINT_STAGING   *! PIMD staging modes on/off!*\n\nType: Boolean (Logical)                                            Level: Basic\n\nUsed to turn staging modes on (true) or off for path integral MD.\nModifiable: restart and on the fly\nAllowed values: TRUE or FALSE\nDefault value : TRUE\n\n", "key_level": "basic", "value_type": "boolean"}, "phonon_use_kpoint_symmetry": {"key_type": "PARAM", "help_short": "reduced or full kpoint set in LR", "help_full": "       PHONON_USE_KPOINT_SYMMETRY   *! reduced or full kpoint set in LR!*\n\nType: Boolean (Logical)                                            Level: Basic\n\nSelects which k-point set to use For each phonon q-vector in LR:\nT => use the irreducible k-point set of the (reduced) symmetry,\nF => use the complete fully symmetric k-point set.\nModifiable: restart only\nAllowed values: TRUE or FALSE\nDefault value : TRUE\n\n", "key_level": "basic", "value_type": "boolean"}, "spin": {"key_type": "PARAM", "help_short": "net spin", "help_full": "                              SPIN   *! net spin!*\n\nType: Real                                                         Level: Basic\n\nThe total z-component of the electronic spin of the system.  Can also be determined by NUP and NDOWN.\nModifiable: never\nAllowed values: (any)\nDefault value : 0.0\n\n", "key_level": "basic", "value_type": "real"}, "relativistic_treatment": {"key_type": "PARAM", "help_short": "level of relativity theory", "help_full": "            RELATIVISTIC_TREATMENT   *! level of relativity theory!*\n\nType: String                                                Level: Intermediate\n\nSelects the method used to treat relativistic effects.\nImplemented via the OTF pseudopotential generator so keyword\nhas no effect if using pseudopotentials read from file.\nModifiable: restart only\nAllowed values: KOELLING-HARMON, SCHROEDINGER, ZORA\nDefault value : KOELLING-HARMON\n\n", "key_level": "intermediate", "value_type": "string"}, "bs_kpoints_mp_grid": {"key_type": "CELL", "help_short": "Alias for BS_KPOINT_MP_GRID", "help_full": "             BS_KPOINTS_MP_GRID   *! Alias for BS_KPOINT_MP_GRID !*\n\nType: Integer Vector                                               Level: Basic\n\nDefault value: Determined from BS_KPOINT_MP_GRID\n", "key_level": "basic", "value_type": "integer"}, "tddft_num_states": {"key_type": "PARAM", "help_short": "number of TDDFT states", "help_full": "                 TDDFT_NUM_STATES   *! number of TDDFT states!*\n\nType: Integer                                                      Level: Basic\n\nThe number of excited states in a TDDFT calculation.\nModifiable: restart only\nAllowed values: (any integer) > TDDFT_SELECTED_STATE\nDefault value : 0\n\n", "key_level": "basic", "value_type": "integer"}, "energy_unit": {"key_type": "PARAM", "help_short": "unit of energy in output", "help_full": "                   ENERGY_UNIT   *! unit of energy in output!*\n\nType: String                                                Level: Intermediate\n\nControls the units used for all energies in output - many different units are  supported.\nModifiable: restart and on the fly\nDefault value : EV\n\n", "key_level": "intermediate", "value_type": "string"}, "phonon_fine_kpoint_mp_offset": {"key_type": "CELL", "help_short": "Origin offset of the fine phonon MP grid", "help_full": "  PHONON_FINE_KPOINT_MP_OFFSET   *! Origin offset of the fine phonon MP grid !*\n\nType: Real Vector                                                  Level: Basic\n\nThe offset of the fine MP grid at which the phonons calculated using DFPT are interpolated.\n", "key_level": "basic", "value_type": "real"}, "force_unit": {"key_type": "PARAM", "help_short": "unit of force in output", "help_full": "                    FORCE_UNIT   *! unit of force in output!*\n\nType: String                                                Level: Intermediate\n\nControls the units used for all forces in output - many different units are  supported.\nModifiable: restart and on the fly\nDefault value : EV/ANG\n\n", "key_level": "intermediate", "value_type": "string"}, "thermo_t_start": {"key_type": "PARAM", "help_short": "Starting temperature", "help_full": "                   THERMO_T_START   *! Starting temperature!*\n\nType: Physical                                                     Level: Basic\n\nThe desired starting temperature for the thermodynamics calculation.\nModifiable: restart and on the fly\nAllowed values: (any) > 0.0\nDefault value : 298 K\n\n", "key_level": "basic", "value_type": "physical"}, "species_lcao_states": {"key_type": "CELL", "help_short": "States for Linear combination of atomic orbitals", "help_full": "  SPECIES_LCAO_STATES   *! States for Linear combination of atomic orbitals !*\n\nType: Block                                                        Level: Basic\n\nThe number of LCAO states to use for a population analysis calculation.  Default value: Determined from the pseudopotential orbitals.\n", "key_level": "basic", "value_type": "block"}, "md_temperature": {"key_type": "PARAM", "help_short": "MD temperature", "help_full": "                      MD_TEMPERATURE   *! MD temperature!*\n\nType: Physical                                                     Level: Basic\n\nThe desired temperature of the molecular dynamics if not NVE ensemble.\nModifiable: restart and on the fly\nAllowed values: (any) > 0.0\nDefault value : 300 k\n\n", "key_level": "basic", "value_type": "physical"}, "spectral_kpoint_mp_spacing": {"key_type": "CELL", "help_short": "Spectral properties Monkurst-Pack grid density", "help_full": " SPECTRAL_KPOINT_MP_SPACING   *! Spectral properties Monkurst-Pack grid density !\n\nType: Physical                                                     Level: Basic\n\nThe k-point density of a Monkhorst-Pack grid used in a band structure calculation.  Units of inverse distance must be specified.\nExample:\nspectral_kpoint_mp_spacing 0.05 1/ang\n\nDefault value: 0.1 1/ang.\n", "key_level": "basic", "value_type": "physical"}, "fine_cut_off_energy": {"key_type": "PARAM", "help_short": "maximum energy component of charge density", "help_full": "      FINE_CUT_OFF_ENERGY   *! maximum energy component of charge density!*\n\nType: Physical                                              Level: Intermediate\n\nDetermines the size of the fine grid used to represent the charge density.\nModifiable: never\nAllowed values: (any) > 0.0\nDefault value : set by FINE_GMAX\n\n", "key_level": "intermediate", "value_type": "physical"}, "print_memory_usage": {"key_type": "PARAM", "help_short": "memory on/off", "help_full": "                     PRINT_MEMORY_USAGE   *! memory on/off!*\n\nType: Boolean (Logical)                                            Level: Basic\n\nSpecifies whether or not to print out memory usage estimate.\nModifiable: restart and on the fly\nAllowed values: TRUE or FALSE\nDefault value : TRUE\n\n", "key_level": "basic", "value_type": "boolean"}, "optics_xc_definition": {"key_type": "PARAM", "help_short": "optics exchange-correlation functional", "help_full": "       OPTICS_XC_DEFINITION   *! optics exchange-correlation functional!*\n\nType: Block                                                        Level: Basic\n\nThe functional to use when calculating the exchange-correlation potential during\nan optics calculation.\nThis version is a BLOCK keyword, with the flexibility to allow an arbitrary\nmixing of any of the basic OPTICS_XC_FUNCTIONAL components.\nBasic format: a series of separate lines, each containing <func> <weight>\nwhere <func> is the appropriate kernel for either eXchange or Correlation or both\nand <weight> is supposed to add to 1.0 for both eXchange and Correlation.\nModifiable: restart only\nDefault value : set by XC_FUNCTIONAL\n\n", "key_level": "basic", "value_type": "block"}, "efield_unit": {"key_type": "PARAM", "help_short": "unit of electric field in output", "help_full": "               EFIELD_UNIT   *! unit of electric field in output!*\n\nType: String                                                Level: Intermediate\n\nControls the units used for all electric field in output - many different  units are supported.\nModifiable: restart and on the fly\nDefault value : EV/ANG/E\n\n", "key_level": "intermediate", "value_type": "string"}, "geom_method": {"key_type": "PARAM", "help_short": "geometry optimization method", "help_full": "                 GEOM_METHOD   *! geometry optimization method!*\n\nType: String                                                       Level: Basic\n\nDetermines the method to use for geometry optimization.\nModifiable: restart only\nAllowed values: BFGS, LBFGS, DAMPEDMD, DELOCALIZED, FIRE, TPSD, PES\nDefault value : BFGS\n\n", "key_level": "basic", "value_type": "string"}, "kpoints_mp_offset": {"key_type": "CELL", "help_short": "SCF Monkhorst Pack grid offset", "help_full": "            KPOINTS_MP_OFFSET   *! SCF Monkhorst Pack grid offset !*\n\nType: Real Vector                                                  Level: Basic\n\nThe offset of the origin of the Monkhorst-Pack set in fractional coordinates.\nExample:\nkpoints_mp_offset 0.125 0.0 0.5\n\nDefault value: (0, 0, 0).\n", "key_level": "basic", "value_type": "real"}, "spectral_kpoints_path": {"key_type": "CELL", "help_short": "Alias for SPECTRAL_KPOINT_PATH", "help_full": "          SPECTRAL_KPOINTS_PATH   *! Alias for SPECTRAL_KPOINT_PATH !*\n\nType: Block                                                        Level: Basic\n\nDefault value: Determined from SPECTRAL_KPOINT_PATH\n", "key_level": "basic", "value_type": "block"}, "max_diis_steps": {"key_type": "PARAM", "help_short": "max. number of RMM/DIIS steps", "help_full": "               MAX_DIIS_STEPS   *! max. number of RMM/DIIS steps!*\n\nType: Integer                                               Level: Intermediate\n\nThe maximum number of RMM/DIIS steps in an SCF cycle.\nModifiable: restart and on the fly\nAllowed values: (any integer) >=0\nDefault value : set by ELECTRONIC_MINIMIZER\n\n", "key_level": "intermediate", "value_type": "integer"}, "xc_functional": {"key_type": "PARAM", "help_short": "exchange-correlation functional", "help_full": "              XC_FUNCTIONAL   *! exchange-correlation functional!*\n\nType: String                                                       Level: Basic\n\nThe functional to use when calculating the exchange-correlation potential.\nModifiable: restart only\nAllowed values: LDA, PW91, PBE, PBESOL, RPBE, WC, BLYP, LDA-C, LDA-X, ZERO,  HF, PBE0, B3LYP, HSE03, HSE06, EXX-X, HF-LDA, EXX, EXX-LDA,  SHF, SX, SHF-LDA, SX-LDA, WDA, SEX, SEX-LDA.\nIn addition, we now support libXC and all the additional functionals therein.\nDefault value : LDA\n\n", "key_level": "basic", "value_type": "string"}, "geom_tpsd_iterchange": {"key_type": "PARAM", "help_short": "max number of TPSD updates before BFGS", "help_full": "       GEOM_TPSD_ITERCHANGE   *! max number of TPSD updates before BFGS!*\n\nType: Integer                                                      Level: Basic\n\nIf GEOM_METHOD=TPSD then only store GEOM_TPSD_ITERCHANGE number of updates before change to BFGS.\nIf GEOM_TPSD_ITERCHANGE=0 then the number of updates done as TPSD is unlimited.\nModifiable: restart and on the fly\nAllowed values: (any integer) >= 0\nDefault value : 0\n\n", "key_level": "basic", "value_type": "integer"}, "elnes_kpoint_mp_grid": {"key_type": "CELL", "help_short": "The Monkhorst-Pack grid for ELNES (core level spectroscopy) k-points", "help_full": " ELNES_KPOINT_MP_GRID   *! The Monkhorst-Pack grid for ELNES (core level spectros\n\nType: Integer Vector                                               Level: Basic\n\nThe grid defining the Monkhorst-Pack set of k-points at which the ELNES (core level spectroscopy) calculations will be performed.\n", "key_level": "basic", "value_type": "integer"}, "mix_metric_q": {"key_type": "PARAM", "help_short": "density mixing metric coefficient", "help_full": "             MIX_METRIC_Q   *! density mixing metric coefficient !*\n\nType: Physical                                              Level: Intermediate\n\nDetermines the metric for the densities within the DM scheme.\nModifiable: never\nAllowed values: (any) > 0.0\nDefault value : set by ELECTRONIC_MINIMIZER\n\n", "key_level": "intermediate", "value_type": "physical"}, "efield_max_cg_steps": {"key_type": "PARAM", "help_short": "max. number of cg steps in EFIELD", "help_full": "          EFIELD_MAX_CG_STEPS   *! max. number of cg steps in EFIELD!*\n\nType: Integer                                               Level: Intermediate\n\nThe maximum number of conjugate gradient steps in EFIELD calculation before  performing a SD reset.\nModifiable: restart and on the fly\nAllowed values: (any integer) >= 0\nDefault value : 0\n\n", "key_level": "intermediate", "value_type": "integer"}, "impose_trs": {"key_type": "PARAM", "help_short": "OBSOLETE", "help_full": "                           IMPOSE_TRS   *! OBSOLETE !*\n\nType: Boolean (Logical)                                     Level: Intermediate\n\nNB This is an OBSOLETE form - please use NLXC_IMPOSE_TRS instead.\n\n", "key_level": "intermediate", "value_type": "boolean"}, "page_ex_pot": {"key_type": "PARAM", "help_short": "OBSOLETE", "help_full": "                          PAGE_EX_POT   *! OBSOLETE !*\n\nType: Integer                                               Level: Intermediate\n\nNB This is an OBSOLETE form - please use NLXC_PAGE_EX_POT instead.\n\n", "key_level": "intermediate", "value_type": "integer"}, "external_efield": {"key_type": "CELL", "help_short": "External applied electric field", "help_full": "             EXTERNAL_EFIELD   *! External applied electric field !*\n\nType: Block                                                        Level: Basic\n\nThe electric field vector applied to the cell during the SCF, molecular dynamics  and geometry optimisation. Optionally, units of appied electric field may also be given.  This is valid only for molecular systems [a sawtooth potential is applied].\nExample:\n%block external_efield\nev/ang/e\n2.0 0.0 0.0 ! Apply foeld in x-direction\n%endblock external_efield\nDefault value: 0.0 eV/A/e\n", "key_level": "basic", "value_type": "block"}, "geom_disp_tol": {"key_type": "PARAM", "help_short": "geometry optimization displacement convergence tolerance", "help_full": "  GEOM_DISP_TOL   *! geometry optimization displacement convergence tolerance!*\n\nType: Physical                                                     Level: Basic\n\nTolerance for accepting convergence of the maximum |ionic displacement| during  geometry optimization.\nModifiable: restart and on the fly\nAllowed values: (any) > 0.0\nDefault value : 0.001 ANG\n\n", "key_level": "basic", "value_type": "physical"}, "md_eqm_cell_t": {"key_type": "PARAM", "help_short": "MD equilibration time for cell", "help_full": "               MD_EQM_CELL_T   *! MD equilibration time for cell!*\n\nType: Physical                                                     Level: Basic\n\nSpecify characteristic time for cell to use in enhanced MD equilibration method.\nModifiable: restart and on the fly\nAllowed values: (any) > 0.0\nDefault value : MD_CELL_T\n\n", "key_level": "basic", "value_type": "physical"}, "spectral_kpoints_list": {"key_type": "CELL", "help_short": "Alias for SPECTRAL_KPOINT_LIST", "help_full": "          SPECTRAL_KPOINTS_LIST   *! Alias for SPECTRAL_KPOINT_LIST !*\n\nType: Block                                                        Level: Basic\n\nDefault value: Determined from SPECTRAL_KPOINT_LIST\n", "key_level": "basic", "value_type": "block"}, "lattice_cart": {"key_type": "CELL", "help_short": "Lattice vectors - Cartesian", "help_full": "                LATTICE_CART   *! Lattice vectors - Cartesian !*\n\nType: Block                                                        Level: Basic\n\nThe cell lattice vectors (3x3 matrix) in Cartesian coordinates.  Optionally, length units may be specified on the first line.\n\nExample:\n%block lattice_cart\nAng\n5.4 0.0 0.0\n0.0 5.4 0.0\n0.0 0.0 5.4\n%endblock lattice_cart\n\nDefault value: None,  Default units: Angstroms.\n", "key_level": "basic", "value_type": "block"}, "phonon_force_constant_ellipsoid": {"key_type": "PARAM", "help_short": "alias for PHONON_FORCE_CONSTANT_CUT_SCALE", "help_full": " PHONON_FORCE_CONSTANT_ELLIPSOID   *! alias for PHONON_FORCE_CONSTANT_CUT_SCALE !\n\nType: Real                                                  Level: Intermediate\n\nScale factor used when PHONON_FINE_CUTOFF_METHOD = DEFAULT.\nAlias for PHONON_FORCE_CONSTANT_CUT_SCALE - deprecated version.\nModifiable: restart and on the fly\nAllowed values: 0.0 <= (any) >= 1.0\nDefault value : 1.0\n\n", "key_level": "intermediate", "value_type": "real"}, "wannier_spread_tol": {"key_type": "PARAM", "help_short": "Wannier convergence tolerance in LAMBDA", "help_full": "       WANNIER_SPREAD_TOL   *! Wannier convergence tolerance in LAMBDA !*\n\nType: Real                                                         Level: Basic\n\nTolerance for Wannier function spread minimisation at the Gamma point  (Lambda = Silvestrelli Sigma).\nModifiable: restart and on the fly\nAllowed values: (any) >= 0.0\nDefault value : 10^-8\n\n", "key_level": "basic", "value_type": "real"}, "write_checkpoint": {"key_type": "PARAM", "help_short": "control output checkpoint file", "help_full": "             WRITE_CHECKPOINT   *! control output checkpoint file!*\n\nType: String                                                       Level: Basic\n\nSpecifies whether or not to write both check and castep_bin files, and\n(optionally) fine control on what to write for periodic backup, failure or success.\nModifiable: restart and on the fly\nAllowed values: NONE, MINIMAL, ALL (or BOTH or FULL), with optional SUCCESS= FAILURE= BACKUP= options.\nDefault value : ALL\n\n", "key_level": "basic", "value_type": "string"}, "ppd_integral": {"key_type": "PARAM", "help_short": "OBSOLETE", "help_full": "                          PPD_INTEGRAL   *! OBSOLETE !*\n\nType: Boolean (Logical)                                            Level: Basic\n\nNB This keyword has been removed.\n\n", "key_level": "basic", "value_type": "boolean"}, "charge_unit": {"key_type": "PARAM", "help_short": "unit of charge in output", "help_full": "                   CHARGE_UNIT   *! unit of charge in output!*\n\nType: String                                                Level: Intermediate\n\nControls the units used for all charges in output.\nModifiable: restart and on the fly\nAllowed values: E, C\nDefault value : E\n\n", "key_level": "intermediate", "value_type": "string"}, "inv_length_unit": {"key_type": "PARAM", "help_short": "unit of inverse length in output", "help_full": "             INV_LENGTH_UNIT   *! unit of inverse length in output!*\n\nType: String                                                Level: Intermediate\n\nControls the units used for all inverse lengths in output - many different  units are supported.\nModifiable: restart and on the fly\nDefault value : 1/ANG\n\n", "key_level": "intermediate", "value_type": "string"}, "geom_modulus_est": {"key_type": "PARAM", "help_short": "estimated bulk modulus", "help_full": "                 GEOM_MODULUS_EST   *! estimated bulk modulus!*\n\nType: Physical                                                     Level: Basic\n\nThe estimated bulk modulus which will be used to optimize the cell  relaxation where appropriate.\nA negative value indicates update estimated value after 1st step.\nAllowed values: (any) /= 0.0\nDefault value : 500 GPa\n\n", "key_level": "basic", "value_type": "physical"}, "bs_kpoint_path_spacing": {"key_type": "CELL", "help_short": "Band structure path spacing", "help_full": "           BS_KPOINT_PATH_SPACING   *! Band structure path spacing !*\n\nType: Physical                                                     Level: Basic\n\nThe maximum spacing between mycell%kpoints along the path specified by BS_KPOINT_PATH.  Units of inverse length must be specified.\nExample:\nbs_kpoint_path_spacing 0.05 1/ang\nDefault value: 0.1 1/ang\n", "key_level": "basic", "value_type": "physical"}, "optics_kpoint_mp_spacing": {"key_type": "CELL", "help_short": "Alias for OPTICS_KPOINTS_MP_SPACING", "help_full": "      OPTICS_KPOINT_MP_SPACING   *! Alias for OPTICS_KPOINTS_MP_SPACING !*\n\nType: Physical                                                     Level: Basic\n\nDefault value: Determined from OPTICS_KPOINTS_MP_SPACING\n", "key_level": "basic", "value_type": "physical"}, "md_elec_energy_tol": {"key_type": "PARAM", "help_short": "MD total energy per atom convergence tolerance", "help_full": "    MD_ELEC_ENERGY_TOL   *! MD total energy per atom convergence tolerance!*\n\nType: Physical                                              Level: Intermediate\n\nTolerance for accepting convergence of the total energy per atom during SCF  cycle in an MD calculation. The difference between max and min energies over   current_params%elec_convergence_win iterations must be less than this.\nModifiable: restart and on the fly\nAllowed values: (any) > 0.0\nDefault value : ELEC_ENERGY_TOL\n\n", "key_level": "intermediate", "value_type": "physical"}, "re_est_k_scrn": {"key_type": "PARAM", "help_short": "OBSOLETE", "help_full": "                         RE_EST_K_SCRN   *! OBSOLETE !*\n\nType: Boolean (Logical)                                     Level: Intermediate\n\nNB This is an OBSOLETE form - please use NLXC_RE_EST_K_SCRN instead.\n\n", "key_level": "intermediate", "value_type": "boolean"}, "perc_extra_bands": {"key_type": "PARAM", "help_short": "percentage of extra bands", "help_full": "                PERC_EXTRA_BANDS   *! percentage of extra bands!*\n\nType: Real                                                  Level: Intermediate\n\nThe percentage of extra bands above current_params%nelectrons/2.\nNecessary for metal or finite temperature insulator.\nModifiable: never\nAllowed values: (any) >= 0.0\nDefault value : 0.0 if FIX_OCCUPANCY or 20% otherwise\n\n", "key_level": "intermediate", "value_type": "real"}, "ga_mutate_amp": {"key_type": "PARAM", "help_short": "GA mutation amplitude", "help_full": "                   GA_MUTATE_AMP   *! GA mutation amplitude!*\n\nType: Physical                                                     Level: Basic\n\nAmplitude (+/-) of a mutation if it occurs after GA crossover.\nModifiable: restart and on the fly\nAllowed values: (any) >= 0.0\nDefault value : 1.0 Ang\n\n", "key_level": "basic", "value_type": "physical"}, "sedc_sr_ts": {"key_type": "PARAM", "help_short": "SR value for TS semi-empirical dispersion/vdW correction scheme", "help_full": " SEDC_SR_TS   *! SR value for TS semi-empirical dispersion/vdW correction scheme\n\nType: Real                                                        Level: Expert\n\nCustomisable SR value for the damping function in the TS  semi-empirical dispersion/van der Waals correction scheme.\nModifiable: restart and on the fly\nDefault is determined by XC_FUNCTIONAL.\n\n", "key_level": "expert", "value_type": "real"}, "write_otfg": {"key_type": "PARAM", "help_short": "output OTFG files", "help_full": "                       WRITE_OTFG   *! output OTFG files!*\n\nType: Boolean (Logical)                                            Level: Basic\n\nSpecifies whether or not to write out the set of On The Fly Generated pseudopotential files for this run.\nModifiable: restart and on the fly\nAllowed values: TRUE or FALSE\nDefault value : TRUE\n\n", "key_level": "basic", "value_type": "boolean"}, "bs_kpoint_mp_offset": {"key_type": "CELL", "help_short": "Band structure Monkhorst-Pack grid offset", "help_full": "      BS_KPOINT_MP_OFFSET   *! Band structure Monkhorst-Pack grid offset !*\n\nType: Real Vector                                                  Level: Basic\n\nThe offset of the origin of the Monkhorst-Pack set for a  Band structrure (density of states) calculation.  This is specified in fractional coordinates.  Default value: (0, 0, 0)\n", "key_level": "basic", "value_type": "real"}, "finite_basis_npoints": {"key_type": "PARAM", "help_short": "Number of points used in automatic basis correction", "help_full": " FINITE_BASIS_NPOINTS   *! Number of points used in automatic basis correction!*\n\nType: Integer                                               Level: Intermediate\n\nThe number of points used to estimate BASIS_DE_DLOGE in automatic finite  basis set correction. Points will be chosen s.t. final calculation has cut-off  energy used in run.\nModifiable: restart only\nAllowed values: (any integer) > 1\nDefault value : 3\n\n", "key_level": "intermediate", "value_type": "integer"}, "sedc_d_g06": {"key_type": "PARAM", "help_short": "d value for G06 semi-empirical dispersion/vdW correction scheme", "help_full": " SEDC_D_G06   *! d value for G06 semi-empirical dispersion/vdW correction scheme\n\nType: Real                                                        Level: Expert\n\nCustomisable d value for the damping function in the G06  semi-empirical dispersion/van der Waals correction scheme.\nModifiable: restart and on the fly\nDefault is determined by XC_FUNCTIONAL.\n\n", "key_level": "expert", "value_type": "real"}, "efield_freq_spacing": {"key_type": "PARAM", "help_short": "Spacing of frequencies in permittivity calc", "help_full": "     EFIELD_FREQ_SPACING   *! Spacing of frequencies in permittivity calc!*\n\nType: Physical                                              Level: Intermediate\n\nSpacing of frequencies in calculation of frequency-dependent permittivity.\nModifiable: restart and on the fly\nAllowed values: (any) > 0.0\nDefault value : 1.0 cm^-1\n\n", "key_level": "intermediate", "value_type": "physical"}, "fine_grid_scale": {"key_type": "PARAM", "help_short": "fine grid size", "help_full": "                      FINE_GRID_SCALE   *! fine grid size!*\n\nType: Real                                                  Level: Intermediate\n\nDetermines the size of the fine grid as a multiple of the diameter of the  cut-off sphere. By default, the fine grid will be the same as the standard grid.  The fine grid is used to represent the charge density.\nModifiable: never\nAllowed values: (any) > 0.0\nDefault value : set to GRID_SCALE\n\n", "key_level": "intermediate", "value_type": "real"}, "print_clock": {"key_type": "PARAM", "help_short": "clock on/off", "help_full": "                         PRINT_CLOCK   *! clock on/off!*\n\nType: Boolean (Logical)                                            Level: Basic\n\nSpecifies whether or not to print out timing information as the calculation  progresses.\nModifiable: restart and on the fly\nAllowed values: TRUE or FALSE\nDefault value : TRUE\n\n", "key_level": "basic", "value_type": "boolean"}, "calc_molecular_dipole": {"key_type": "PARAM", "help_short": "electric dipole on/off", "help_full": "               CALC_MOLECULAR_DIPOLE   *! electric dipole on/off!*\n\nType: Boolean (Logical)                                            Level: Basic\n\nSpecifies whether or not to calculate electric dipole moment,  treating whole system as isolated molecule.\nModifiable: restart and on the fly\nAllowed values: TRUE or FALSE\nDefault value : FALSE\n\n", "key_level": "basic", "value_type": "boolean"}, "snap_to_symmetry": {"key_type": "CELL", "help_short": "Force supplied lattice parameters and positions to obey given symmetries", "help_full": " SNAP_TO_SYMMETRY   *! Force supplied lattice parameters and positions to obey gi\n\nType: Defined                                                      Level: Basic\n\nIf SNAP_TO_SYMMETRY keyword is present then, given the symmetry  operations supplied or generated in cell, the ionic positions and   lattice parameters are forced to obey the symmetries (to machine precision).   Example:\nsnap_to_symmetry\n\nDefault value: not present.\n", "key_level": "basic", "value_type": "defined"}, "raman_range_high": {"key_type": "PARAM", "help_short": "stop frequency for Raman", "help_full": "                RAMAN_RANGE_HIGH   *! stop frequency for Raman !*\n\nType: Physical                                                     Level: Basic\n\nUpper limit of a frequency window for which Raman intensities will be calculated.\nModifiable: restart and on the fly\nAllowed values: (any) > RAMAN_RANGE_LOW\nDefault value : 1.0 eV\n\n", "key_level": "basic", "value_type": "physical"}, "magres_task": {"key_type": "PARAM", "help_short": "MAGRES run type", "help_full": "                       MAGRES_TASK   *! MAGRES run type !*\n\nType: String                                                       Level: Basic\n\nSpecifies which magnetic property to calculate.\nModifiable: restart and on the fly\nAllowed values: SHIELDING, EFG, NMR, GTENSOR, HYPERFINE, EPR, JCOUPLING\nDefault value : SHIELDING\n\n", "key_level": "basic", "value_type": "string"}, "message_size": {"key_type": "PARAM", "help_short": "max alltoallv message size", "help_full": "                 MESSAGE_SIZE   *! max alltoallv message size !*\n\nType: Integer                                                     Level: Expert\n\nSpecifies the minimum size (in 16 Byte units) of an alltoallv message.\nModifiable: restart only\nAllowed values: (any integer) > 0\nDefault value : (hardware dependent)\n\n", "key_level": "expert", "value_type": "integer"}, "sedc_custom_params": {"key_type": "CELL", "help_short": "Customized parameters for semi-empirical dispersion correction schemes", "help_full": " SEDC_CUSTOM_PARAMS   *! Customized parameters for semi-empirical dispersion corr\n\nType: Block                                                        Level: Basic\n\nused to calculate van der Waals forces. Default value for each species  is determined by the chosen semiempirical correction scheme.\n", "key_level": "basic", "value_type": "block"}, "tddft_convergence_win": {"key_type": "PARAM", "help_short": "convergence tolerance window in TDDFT calc", "help_full": "     TDDFT_CONVERGENCE_WIN   *! convergence tolerance window in TDDFT calc!*\n\nType: Integer                                               Level: Intermediate\n\nThe TDDFT convergence criteria must be met for TDDFT_CONVERGENCE_WIN iterations  before acceptance.\nModifiable: restart and on the fly\nAllowed values: (any integer) >= 2\nDefault value : 2\n\n", "key_level": "intermediate", "value_type": "integer"}, "nlxc_ppd_integral": {"key_type": "PARAM", "help_short": "OBSOLETE", "help_full": "                       NLXC_PPD_INTEGRAL   *! OBSOLETE !*\n\nType: Boolean (Logical)                                            Level: Basic\n\nNB This keyword has been removed.\n\n", "key_level": "basic", "value_type": "boolean"}, "help": {"key_type": "PARAM", "help_short": "information on PARAMETERS keywords:", "help_full": "Usage:\ncastep <seedname>                : Run files <seedname>.cell [and <seedname>.param]\n  \"    [-d|--dryrun] <seedanme>  : Perform a dryrun calculation on files <seedname>.cell\n  \"    [-s|--search] <text>      : print list of keywords with <text> match in description\n  \"    [-v|--version]            : print version information\n  \"    [-h|--help] <keyword>     : describe specific keyword in <>.cell or <>.param\n  \"         \"      all           : print list of all keywords\n  \"         \"      basic         : print list of basic-level keywords\n  \"         \"      inter         : print list of intermediate-level keywords\n  \"         \"      expert        : print list of expert-level keywords\n  \"         \"      dummy         : print list of dummy keywords\n", "key_level": null, "value_type": null}, "jcoupling_site": {"key_type": "CELL", "help_short": "The perturbing site for a magres J-coupling calculation", "help_full": " JCOUPLING_SITE   *! The perturbing site for a magres J-coupling calculation !*\n\nType: String                                                       Level: Basic\n\nDefault value: No default value\n", "key_level": "basic", "value_type": "string"}, "nlxc_k_scrn_averaging_scheme": {"key_type": "PARAM", "help_short": "averaging scheme for k-screening length", "help_full": "  NLXC_K_SCRN_AVERAGING_SCHEME   *! averaging scheme for k-screening length !*\n\nType: String                                                Level: Intermediate\n\nDetermines the averaging scheme to use for estimating the k-screening length.\nModifiable: restart only\nAllowed values: HEG_DEN, AVE_DEN, SWA_DEN, SWA_ESX\nDefault value : HEG_DEN\n\n", "key_level": "intermediate", "value_type": "string"}, "phonon_dfpt_method": {"key_type": "PARAM", "help_short": "phonon DFPT solver method", "help_full": "              PHONON_DFPT_METHOD   *! phonon DFPT solver method !*\n\nType: String                                                Level: Intermediate\n\nSelects the solver for phonon density functional perturbation theory.\nModifiable: restart only\nAllowed values: ALLBANDS(=VARIATIONAL) or DM(=GREEN) to select Gonze  variational or Baroni Green function with DM solver.\nDefault value : DM if FIX_OCCUPANCY=FALSE, otherwise ALLBANDS\n\n", "key_level": "intermediate", "value_type": "string"}, "md_thermostat": {"key_type": "PARAM", "help_short": "MD thermostat", "help_full": "                       MD_THERMOSTAT   *! MD thermostat!*\n\nType: String                                                       Level: Basic\n\nThe thermostat method of the molecular dynamics if not NVE ensemble.\nModifiable: restart only\nAllowed values: NOSE-HOOVER, LANGEVIN, HOOVER-LANGEVIN\nDefault value : NOSE-HOOVER\n\n", "key_level": "basic", "value_type": "string"}, "md_delta_t": {"key_type": "PARAM", "help_short": "MD timestep", "help_full": "                          MD_DELTA_T   *! MD timestep!*\n\nType: Physical                                                     Level: Basic\n\nThe timestep for  molecular dynamics.\nModifiable: restart and on the fly\nAllowed values: (any) > 0.0\nDefault value : 1.0 FS\n\n", "key_level": "basic", "value_type": "physical"}, "magres_xc_functional": {"key_type": "PARAM", "help_short": "magres exchange-correlation functional", "help_full": "       MAGRES_XC_FUNCTIONAL   *! magres exchange-correlation functional!*\n\nType: String                                                       Level: Basic\n\nThe functional to use when calculating the exchange-correlation potential during  a magres calculation.\nModifiable: restart only\nAllowed values: LDA, PW91, PBE, PBESOL, RPBE, WC, BLYP, ZERO, WDA.\nIn addition, we now support libXC and all the non-hybrid functionals therein.\nDefault value : XC_FUNCTIONAL if allowed or PBE otherwise\n\n", "key_level": "basic", "value_type": "string"}, "tddft_xc_functional": {"key_type": "PARAM", "help_short": "TDDFT exchange correlation kernel", "help_full": "          TDDFT_XC_FUNCTIONAL   *! TDDFT exchange correlation kernel!*\n\nType: String                                                       Level: Basic\n\nThe functional to use when calculating the exchange-correlation kernel during a TDDFT calculation.  Allowed values: LDA, PW91, PBE, PBESOL, RPBE, WC, BLYP, LDA-C, LDA-X, ZERO,  HF, PBE0, B3LYP, HSE, HSE06, EXX-X, HF-LDA, EXX, EXX-LDA,  SHF, SX, SHF-LDA, SX-LDA, WDA, SEX, SEX-LDA.\nIn addition, we now support libXC and all the additional functionals therein.\nModifiable: restart only\nDefault value : set by XC_FUNCTIONAL\n\n", "key_level": "basic", "value_type": "string"}, "elnes_kpoint_mp_spacing": {"key_type": "CELL", "help_short": "The spacing of points on the fine MP set for ELNES (core level spectroscopy)", "help_full": " ELNES_KPOINT_MP_SPACING   *! The spacing of points on the fine MP set for ELNES\n\nType: Physical                                                     Level: Basic\n\nThis specifies the miminum spacing bewteen points on a Monkhorst-Pack grid that ELNES (core level spectroscopy) properties will be calculated with.\nExample:\nelnes_kpoint_mp_spacing 0.05 1/ang\n\nDefault: same as the SCF k-point set.\n", "key_level": "basic", "value_type": "physical"}, "fix_com": {"key_type": "CELL", "help_short": "Fix centre of mass", "help_full": "                       FIX_COM   *! Fix centre of mass !*\n\nType: Boolean (Logical)                                            Level: Basic\n\nIf keyword is present, the centre of mass of the ions will remain fixed  during a geometry optimisation or molecular dynamics simulation.  Example:\nfix_com\n\nDefault value: not present (hence false), unless FIX_ALL_IONS is specified.\n", "key_level": "basic", "value_type": "boolean"}, "mix_cut_off_energy": {"key_type": "PARAM", "help_short": "density mixing cut off energy", "help_full": "            MIX_CUT_OFF_ENERGY   *! density mixing cut off energy !*\n\nType: Physical                                              Level: Intermediate\n\nDetermines the cut off energy for the densities within the DM scheme.\nModifiable: never\nAllowed values: (any) > 0.0\nDefault value : CUT_OFF_ENERGY\n\n", "key_level": "intermediate", "value_type": "physical"}, "nlxc_div_corr_on": {"key_type": "PARAM", "help_short": "OBSOLETE", "help_full": "                        NLXC_DIV_CORR_ON   *! OBSOLETE !*\n\nType: Boolean (Logical)                                            Level: Basic\n\nNB This keyword has been removed.\n\n", "key_level": "basic", "value_type": "boolean"}, "wannier_ion_cut_tol": {"key_type": "PARAM", "help_short": "Tolerance in wannier_ion_cut_fraction", "help_full": "        WANNIER_ION_CUT_TOL   *! Tolerance in wannier_ion_cut_fraction !*\n\nType: Real                                                         Level: Basic\n\nIn the real-space truncated integration for the calculation of ion moments the  truncation radius r_cut  for a given ion is determined by insisting that an  ion-centred sphere should contain current_params%wannier_ion_cut_fraction of the total charge  density of the ion, to within an accuracy current_params%wannier_ion_cut_tol * ion_density.\nModifiable: restart and on the fly\nAllowed values: (any) > 0.0\nDefault value : 10^-5\n\n", "key_level": "basic", "value_type": "real"}, "fix_all_ions": {"key_type": "CELL", "help_short": "Fix all ionic positions", "help_full": "                  FIX_ALL_IONS   *! Fix all ionic positions !*\n\nType: Boolean (Logical)                                            Level: Basic\n\nIf present, all ions remain fixed, in a geometry optimisation.  Default value: False.\n", "key_level": "basic", "value_type": "boolean"}, "bs_nextra_bands": {"key_type": "PARAM", "help_short": "number of extra bandstructure bands", "help_full": "           BS_NEXTRA_BANDS   *! number of extra bandstructure bands!*\n\nType: Integer                                               Level: Intermediate\n\nThe number of extra bands in a bandstructure calculation above NBANDS.\nModifiable: restart and on the fly\nAllowed values: (any integer) >= 0\nDefault value : 0\n\n", "key_level": "intermediate", "value_type": "integer"}, "rand_seed": {"key_type": "PARAM", "help_short": "seed for random numbers", "help_full": "                    RAND_SEED   *! seed for random numbers!*\n\nType: Integer                                                      Level: Basic\n\nControls the random initialization of wavefunctions and other things.\nIf =0, then the random number sequence will not be repeatable.\nIf <>0, then this will become the random number generator seed, for repeatable random number sequences.\nModifiable: restart only\nAllowed values: (any integer)\nDefault value : 0\n\n", "key_level": "basic", "value_type": "integer"}, "elec_force_tol": {"key_type": "PARAM", "help_short": "max force per atom convergence tolerance", "help_full": "         ELEC_FORCE_TOL   *! max force per atom convergence tolerance!*\n\nType: Physical                                                     Level: Basic\n\nTolerance for accepting convergence of the total energy due to change in   max force per atom. The difference between max force on any atom over  current_params%elec_convergence_win iterations must be less than this.\nModifiable: restart and on the fly\nAllowed values: (any) > 0.0\nDefault value : set by ELEC_ENERGY_TOL\n\n", "key_level": "basic", "value_type": "physical"}, "md_pathint_init": {"key_type": "PARAM", "help_short": "PIMD initialisation method", "help_full": "                MD_PATHINT_INIT   *! PIMD initialisation method!*\n\nType: String                                                       Level: Basic\n\nThe initialisation method for each bead with path integral MD.\nModifiable: restart only\nAllowed values: GAUSSIAN, POINT, ORIGINAL (deprecated)\nDefault value : GAUSSIAN\n\n", "key_level": "basic", "value_type": "string"}, "wannier_ion_cut": {"key_type": "PARAM", "help_short": "Compute ion multipole moments from truncated integration", "help_full": " WANNIER_ION_CUT   *! Compute ion multipole moments from truncated integration !*\n\nType: Boolean (Logical)                                     Level: Intermediate\n\nSelects whether or not to compute ion multipole moments from maximally localised  Wannier functions using truncated integration in real space.\nModifiable: restart and on the fly\nAllowed values: TRUE or FALSE\nDefault value : FALSE\n\n", "key_level": "intermediate", "value_type": "boolean"}, "calculate_elf": {"key_type": "PARAM", "help_short": "ELF on/off", "help_full": "                         CALCULATE_ELF   *! ELF on/off!*\n\nType: Boolean (Logical)                                            Level: Basic\n\nSpecifies whether or not to perform an electron localisation function (ELF)  calculation.\nModifiable: restart and on the fly\nAllowed values: TRUE or FALSE\nDefault value : FALSE\n\n", "key_level": "basic", "value_type": "boolean"}, "fixed_npw": {"key_type": "PARAM", "help_short": "use fixed PW (T) or fixed Ecut (F)", "help_full": "              FIXED_NPW   *! use fixed PW (T) or fixed Ecut (F) !*\n\nType: Boolean (Logical)                                            Level: Basic\n\nDetermines whether to use a fixed number of plane waves (fixed size basis) if  TRUE or use a fixed plane wave cutoff energy (fixed quality basis) if FALSE  when doing a variable cell calculation.\nModifiable: restart only\nAllowed values: TRUE or FALSE\nDefault value : FALSE\n\n", "key_level": "basic", "value_type": "boolean"}, "md_eqm_t": {"key_type": "PARAM", "help_short": "MD equilibration time", "help_full": "                      MD_EQM_T   *! MD equilibration time!*\n\nType: Physical                                                     Level: Basic\n\nSpecify equilibration time, ie that for MD to use enhanced MD equilibration method.\nModifiable: restart and on the fly\nAllowed values: (any) > 0.0\nDefault value : 0.0 if MD_EQM_METHOD=NONE else 1.0 PS if MD_EQM_METHOD=BERENDSEN\n\n", "key_level": "basic", "value_type": "physical"}, "symmetry_generate": {"key_type": "CELL", "help_short": "Generate crystal symmetry operations", "help_full": "         SYMMETRY_GENERATE   *! Generate crystal symmetry operations !*\n\nType: Defined                                                      Level: Basic\n\nIf present, then the crystal symmetry rotations/translations will be generated automatically.  Example:\nsymmetry_generate\nDefault value: If not present, no symmetry elements are generated.\n", "key_level": "basic", "value_type": "defined"}, "geom_convergence_win": {"key_type": "PARAM", "help_short": "geometry optimization convergence tolerance window", "help_full": " GEOM_CONVERGENCE_WIN   *! geometry optimization convergence tolerance window!*\n\nType: Integer                                               Level: Intermediate\n\nThe geometry energy optimization convergence criteria must be met for  GEOM_CONVERGENCE_WIN iterations before acceptance.\nModifiable: restart and on the fly\nAllowed values: (any integer) > 1\nDefault value : 2\n\n", "key_level": "intermediate", "value_type": "integer"}, "spectral_kpoints_mp_offset": {"key_type": "CELL", "help_short": "Alias for SPECTRAL_KPOINT_MP_OFFSET", "help_full": "     SPECTRAL_KPOINTS_MP_OFFSET   *! Alias for SPECTRAL_KPOINT_MP_OFFSET !*\n\nType: Real Vector                                                  Level: Basic\n\nDefault value: Determined from SPECTRAL_KPOINT_MP_OFFSET\n", "key_level": "basic", "value_type": "real"}, "tssearch_lstqst_protocol": {"key_type": "PARAM", "help_short": "LST/QST search protocol", "help_full": "            TSSEARCH_LSTQST_PROTOCOL   *! LST/QST search protocol !*\n\nType: String                                                       Level: Basic\n\nThe protocol used in Linear or Quadratic searches.\nModifiable: restart only\nAllowed values: LSTMAXIMUM, HALGREN-LIPSCOMB, LST/OPTIMIZATION,  COMPLETELSTQST, QST/OPTIMIZATION\nDefault value : LSTMAXIMUM\n\n", "key_level": "basic", "value_type": "string"}, "xc_definition": {"key_type": "PARAM", "help_short": "exchange-correlation functional", "help_full": "              XC_DEFINITION   *! exchange-correlation functional!*\n\nType: Block                                                        Level: Basic\n\nThe functional to use when calculating the exchange-correlation potential.\nThis version is a BLOCK keyword, with the flexibility to allow an arbitrary\nmixing of any of the basic XC_FUNCTIONAL components.\nBasic format: a series of separate lines, each containing <func> <weight>\nwhere <func> is the appropriate kernel for either eXchange or Correlation or both\nand <weight> is supposed to add to 1.0 for both eXchange and Correlation.\nModifiable: restart only\nDefault value : LDA 1.0\n\n", "key_level": "basic", "value_type": "block"}, "optics_perc_extra_bands": {"key_type": "PARAM", "help_short": "percentage of extra bandstructure bands", "help_full": "     OPTICS_PERC_EXTRA_BANDS   *! percentage of extra bandstructure bands!*\n\nType: Real                                                  Level: Intermediate\n\nThe percentage of extra bands in an optical matrix elements calculation.\nModifiable: restart and on the fly\nAllowed values: (any) >= 0.0\nDefault value : 0.0\n\n", "key_level": "intermediate", "value_type": "real"}, "sedc_s6_jchs": {"key_type": "PARAM", "help_short": "S6 value for JCHS semi-empirical dispersion/vdW correction scheme", "help_full": " SEDC_S6_JCHS   *! S6 value for JCHS semi-empirical dispersion/vdW correction sch\n\nType: Real                                                        Level: Expert\n\nCustomisable S6 value for the damping function in the JCHS  semi-empirical dispersion/van der Waals correction scheme.\nModifiable: restart and on the fly\nDefault is determined by XC_FUNCTIONAL.\n\n", "key_level": "expert", "value_type": "real"}, "dipole_correction": {"key_type": "PARAM", "help_short": "periodic dipole correction", "help_full": "               DIPOLE_CORRECTION   *! periodic dipole correction!*\n\nType: String                                                       Level: Basic\n\nDetermines the scheme used to correct spurious dipole-dipole interactions due  to periodic boundary conditions.\nModifiable: restart only\nAllowed values: NONE, STATIC, SELF CONSISTENT\nDefault value : NONE\n\n", "key_level": "basic", "value_type": "string"}, "elnes_nextra_bands": {"key_type": "PARAM", "help_short": "number of extra elnes bands", "help_full": "              ELNES_NEXTRA_BANDS   *! number of extra elnes bands!*\n\nType: Integer                                               Level: Intermediate\n\nThe number of extra bands in an optical matrix elements calculation.\nModifiable: restart and on the fly\nAllowed values: (any integer) >= 0\nDefault value : 0\n\n", "key_level": "intermediate", "value_type": "integer"}, "phonon_finite_disp": {"key_type": "PARAM", "help_short": "finite displacement amplitude", "help_full": "            PHONON_FINITE_DISP   *! finite displacement amplitude !*\n\nType: Physical                                                     Level: Basic\n\nThe amplitude of the ionic perturbation to be used in a finite displacement  phonon calculation.\nModifiable: restart and on the fly\nAllowed values: (any) > 0.0\nDefault value : 0.01 BOHR\n\n", "key_level": "basic", "value_type": "physical"}, "ppd_size_z": {"key_type": "PARAM", "help_short": "OBSOLETE", "help_full": "                           PPD_SIZE_Z   *! OBSOLETE !*\n\nType: Integer                                               Level: Intermediate\n\nNB This is an OBSOLETE form - please use NLXC_PPD_SIZE_Z instead.\n\n", "key_level": "intermediate", "value_type": "integer"}, "ppd_size_y": {"key_type": "PARAM", "help_short": "OBSOLETE", "help_full": "                           PPD_SIZE_Y   *! OBSOLETE !*\n\nType: Integer                                               Level: Intermediate\n\nNB This is an OBSOLETE form - please use NLXC_PPD_SIZE_Y instead.\n\n", "key_level": "intermediate", "value_type": "integer"}, "ppd_size_x": {"key_type": "PARAM", "help_short": "OBSOLETE", "help_full": "                           PPD_SIZE_X   *! OBSOLETE !*\n\nType: Integer                                               Level: Intermediate\n\nNB This is an OBSOLETE form - please use NLXC_PPD_SIZE_X instead.\n\n", "key_level": "intermediate", "value_type": "integer"}, "md_barostat": {"key_type": "PARAM", "help_short": "MD barostat", "help_full": "                         MD_BAROSTAT   *! MD barostat!*\n\nType: String                                                       Level: Basic\n\nThe barostat method of the molecular dynamics if not constant-volume ensemble.\nModifiable: restart only\nAllowed values: ANDERSEN-HOOVER, PARRINELLO-RAHMAN\nDefault value : ANDERSEN-HOOVER\n\n", "key_level": "basic", "value_type": "string"}, "geom_force_tol": {"key_type": "PARAM", "help_short": "geometry optimization force convergence tolerance", "help_full": "     GEOM_FORCE_TOL   *! geometry optimization force convergence tolerance!*\n\nType: Physical                                                     Level: Basic\n\nTolerance for accepting convergence of the maximum |ionic force| during  geometry optimization.\nModifiable: restart and on the fly\nAllowed values: (any) > 0.0\nDefault value : 0.05 eV/ANG\n\n", "key_level": "basic", "value_type": "physical"}, "elec_dump_file": {"key_type": "PARAM", "help_short": "wavefunction/density etc dump filename", "help_full": "          ELEC_DUMP_FILE   *! wavefunction/density etc dump filename!*\n\nType: String                                                       Level: Basic\n\nName of the file to periodically write the wavefunctions, density, etc to during  electronic minimization, for backup or current_params%reuse/current_params%continuation.\nIf set to NULL then no dumps will be written.\nModifiable: restart only\nAllowed values: up to 255 character filename\nDefault value : <seedname>.wvfn\n\n", "key_level": "basic", "value_type": "string"}, "efield_convergence_win": {"key_type": "PARAM", "help_short": "convergence tolerance window in EFIELD", "help_full": "      EFIELD_CONVERGENCE_WIN   *! convergence tolerance window in EFIELD!*\n\nType: Integer                                               Level: Intermediate\n\nThe LR convergence criteria must be met for EFIELD_CONVERGENCE_WIN iterations  before acceptance.\nModifiable: restart and on the fly\nAllowed values: (any integer) >= 2\nDefault value :  3 if EFIELD_DFPT_METHOD=DM, or 2 otherwise\n\n", "key_level": "intermediate", "value_type": "integer"}, "cml_output": {"key_type": "PARAM", "help_short": "CML output on/off", "help_full": "                       CML_OUTPUT   *! CML output on/off!*\n\nType: Boolean (Logical)                                            Level: Basic\n\nSpecifies whether or not to write additional CML output to <seedname>-<current_params%task>.cml  (Requires compile-time support)\nModifiable: restart and on the fly\nAllowed values: TRUE or FALSE\nDefault value : FALSE\n\n", "key_level": "basic", "value_type": "boolean"}, "phonon_dos_spacing": {"key_type": "PARAM", "help_short": "density of states resolution", "help_full": "             PHONON_DOS_SPACING   *! density of states resolution !*\n\nType: Physical                                                     Level: Basic\n\nThe resolution at which a phonon density-of-states will be calculated.\nModifiable: restart and on the fly\nAllowed values: (any) > 0.0\nDefault value : 10.0 CM^-1\n\n", "key_level": "basic", "value_type": "physical"}, "phonon_force_constant_cut_scale": {"key_type": "PARAM", "help_short": "scale factor for CUMULANT PHONON_FINE_CUTOFF_METHOD", "help_full": " PHONON_FORCE_CONSTANT_CUT_SCALE   *! scale factor for CUMULANT PHONON_FINE_CUTOF\n\nType: Real                                                        Level: Expert\n\nScale factor used when PHONON_FINE_CUTOFF_METHOD = CUMULANT.\nThe range of force constant terms included is within an ellipsoidal region scaled  by this factor along the principle axes relative to the largest ellipsoid which  can be packed with the periodicity of the supercell.\nModifiable: restart and on the fly\nAllowed values: 0.0 <= (any) >= 1.0\nDefault value : 1.0\n\n", "key_level": "expert", "value_type": "real"}, "efield_energy_tol": {"key_type": "PARAM", "help_short": "E(2) convergence tolerance in EFIELD", "help_full": "          EFIELD_ENERGY_TOL   *! E(2) convergence tolerance in EFIELD!*\n\nType: Physical                                                     Level: Basic\n\nTolerance for accepting convergence of the field constants during PHONON  calculation. The difference between max and min E(2) values over  current_params%efield_convergence_win iterations must be less than this.\nNB This is an INTENSIVE parameter and has units of volume.\nModifiable: restart and on the fly\nAllowed values: (any) > 0.0\nDefault value : 10^-5 Ang**3\n\n", "key_level": "basic", "value_type": "physical"}, "bs_kpoints_mp_offset": {"key_type": "CELL", "help_short": "Alias for BS_KPOINT_MP_OFFSET", "help_full": "           BS_KPOINTS_MP_OFFSET   *! Alias for BS_KPOINT_MP_OFFSET !*\n\nType: Real Vector                                                  Level: Basic\n\nDefault value: Determined from BS_KPOINT_MP_OFFSET\n", "key_level": "basic", "value_type": "real"}, "tddft_position_method": {"key_type": "PARAM", "help_short": "select position operator method in TDDFT", "help_full": "      TDDFT_POSITION_METHOD   *! select position operator method in TDDFT!*\n\nType: String                                                       Level: Basic\n\nSelects which method to use for the position operator in TDDFT.\nModifiable: restart and on the fly\nAllowed values: CRYSTAL, MOLECULAR\nThe CRYSTAL method is only compatible with (semi)local XC functionals\nDefault value : MOLECULAR\n\n", "key_level": "basic", "value_type": "string"}, "num_occ_cycles": {"key_type": "PARAM", "help_short": "number of occupancy minimization cycles", "help_full": "          NUM_OCC_CYCLES   *! number of occupancy minimization cycles!*\n\nType: Integer                                               Level: Intermediate\n\nThe number of occupancy minimization cycles for each electronic minimization  step within EDFT scheme.\nModifiable: restart and on the fly\nAllowed values: (any integer) > 0\nDefault value : 6\n\n", "key_level": "intermediate", "value_type": "integer"}, "optics_kpoints_list": {"key_type": "CELL", "help_short": "List of optics k-points", "help_full": "               OPTICS_KPOINTS_LIST   *! List of optics k-points !*\n\nType: Block                                                        Level: Basic\n\nA list of k-points in the brillouin zone with weights used  for calculating optical properties of the system.  Fractional coordinates must be used for the k-points and the weights must sum to 1.\nExample:\n%block optics_kpoint_list\n0.25  0.25  0.25  0.25\n0.25  0.25 -0.25  0.25\n0.25 -0.25  0.25  0.25\n0.25 -0.25 -0.25  0.25\n%endblock optics_kpoint_list\n\nDefault value: SCF k-points\n", "key_level": "basic", "value_type": "block"}, "phonon_fine_kpoint_list": {"key_type": "CELL", "help_short": "List of phonon wavevectors on the fine grid", "help_full": "   PHONON_FINE_KPOINT_LIST   *! List of phonon wavevectors on the fine grid !*\n\nType: Block                                                        Level: Basic\n\nPhonon frequencies are calculated on a coarse set of wavevectors  using DFPT and interpolated onto this finer list of points.\nExample:\n%block phonon_fine_kpoint_list\n0.00000000   0.00000000   0.00000000 ! A path from Gamma to X\n0.10000000   0.00000000   0.00000000\n0.20000000   0.00000000   0.00000000\n0.30000000   0.00000000   0.00000000\n0.40000000   0.00000000   0.00000000\n0.50000000   0.00000000   0.00000000\n%endblock phonon_fine_kpoint_list\n\nDefault : the k-points used by the DFPT phonon calculation.&\n", "key_level": "basic", "value_type": "block"}, "run_time": {"key_type": "PARAM", "help_short": "maximum duration of job", "help_full": "                     RUN_TIME   *! maximum duration of job!*\n\nType: Integer                                               Level: Intermediate\n\nSpecifies the maximum runtime for the job (in seconds) :\nif less than or equal to zero then no time limit will be imposed.\nModifiable: restart and on the fly\nAllowed values: (any)\nDefault value : 0\n\n", "key_level": "intermediate", "value_type": "integer"}, "spectral_perc_extra_bands": {"key_type": "PARAM", "help_short": "percentage of extra spectral bands", "help_full": "       SPECTRAL_PERC_EXTRA_BANDS   *! percentage of extra spectral bands!*\n\nType: Real                                                  Level: Intermediate\n\nThe percentage of extra bands in an electronic spectroscopy calculation above NBANDS.\nModifiable: restart and on the fly\nAllowed values: (any) >= 0.0\nDefault value : 0.0\n\n", "key_level": "intermediate", "value_type": "real"}, "spectral_write_eigenvalues": {"key_type": "PARAM", "help_short": "turn additional eigenvalue output on/off", "help_full": "   SPECTRAL_WRITE_EIGENVALUES   *! turn additional eigenvalue output on/off !*\n\nType: Boolean (Logical)                                            Level: Basic\n\nSpecifies whether or not to write out additional eigenvalue information to .castep file.\nModifiable: restart and on the fly\nAllowed values: TRUE or FALSE\nDefault value : TRUE\n\n", "key_level": "basic", "value_type": "boolean"}, "bs_nbands": {"key_type": "PARAM", "help_short": "number of bands/k-point in band structure calculation", "help_full": "     BS_NBANDS   *! number of bands/k-point in band structure calculation!*\n\nType: Integer                                                      Level: Basic\n\nDetermines the number of bands per k-point in band structure calculation.\nModifiable: restart and on the fly\nAllowed values: (any integer) >= 0\nDefault value : NBANDS + (5*SQRT(NBANDS) or BS_NEXTRA_BANDS or BS_PERC_EXTRA_BANDS)\n\n", "key_level": "basic", "value_type": "integer"}, "magres_max_cg_steps": {"key_type": "PARAM", "help_short": "max. number of cg steps in MAGRES", "help_full": "          MAGRES_MAX_CG_STEPS   *! max. number of cg steps in MAGRES!*\n\nType: Integer                                               Level: Intermediate\n\nThe maximum number of conjugate gradient steps in MAGRES calculation.\nModifiable: restart and on the fly\nAllowed values: (any integer) >= 1\nDefault value : 250\n\n", "key_level": "intermediate", "value_type": "integer"}, "phonon_kpoint_mp_spacing": {"key_type": "CELL", "help_short": "Phonon wavevector Monkhorst-Pack grid density", "help_full": " PHONON_KPOINT_MP_SPACING   *! Phonon wavevector Monkhorst-Pack grid density !*\n\nType: Physical                                                     Level: Basic\n\nThe density of wavevectors on a a Monkhorst-Pack grid for phonon calculations.  Units of inverse length should be specified.\nExample:\nphonon_kpoint_mp_spacing 0.05 1/ang\n\nDefault value: 0.1 1/ang.\n", "key_level": "basic", "value_type": "physical"}, "spectral_xc_functional": {"key_type": "PARAM", "help_short": "spectral exchange-correlation functional", "help_full": "     SPECTRAL_XC_FUNCTIONAL   *! spectral exchange-correlation functional!*\n\nType: String                                                       Level: Basic\n\nThe functional to use when calculating the exchange-correlation potential during  an electronic spectroscopy calculation.\nAllowed values: LDA, PW91, PBE, PBESOL, RPBE, WC, BLYP, LDA-C, LDA-X, ZERO,  HF, PBE0, B3LYP, HSE03, HSE06, EXX-X, HF-LDA, EXX, EXX-LDA,  SHF, SX, SHF-LDA, SX-LDA, WDA, SEX, SEX-LDA.\nIn addition, we now support libXC and all the additional functionals therein.\nModifiable: restart only\nDefault value : set by XC_FUNCTIONAL\n\n", "key_level": "basic", "value_type": "string"}, "bs_write_eigenvalues": {"key_type": "PARAM", "help_short": "turn additional eigenvalue output on/off", "help_full": "      BS_WRITE_EIGENVALUES   *! turn additional eigenvalue output on/off !*\n\nType: Boolean (Logical)                                            Level: Basic\n\nSpecifies whether or not to write out additional eigenvalue information to .castep file.\nModifiable: restart and on the fly\nAllowed values: TRUE or FALSE\nDefault value : TRUE\n\n", "key_level": "basic", "value_type": "boolean"}, "fix_vol": {"key_type": "CELL", "help_short": "Fix volume of cell", "help_full": "                       FIX_VOL   *! Fix volume of cell !*\n\nType: Boolean (Logical)                                            Level: Basic\n\nIf keyword is present, the volume of the cell will remain fixed  although cell angles and cell lengths may still be varied.  Default value: False, unless FIX_VOL is specified.\n", "key_level": "basic", "value_type": "boolean"}, "species_q": {"key_type": "CELL", "help_short": "Electric quadrupole moment for each species", "help_full": "          SPECIES_Q   *! Electric quadrupole moment for each species !*\n\nType: Block                                                        Level: Basic\n\nThe nuclear electric quadrupole moment for each  atomic species\n", "key_level": "basic", "value_type": "block"}, "tddft_approximation": {"key_type": "PARAM", "help_short": "select Tamm-Dancoff approximation in TDDFT", "help_full": "      TDDFT_APPROXIMATION   *! select Tamm-Dancoff approximation in TDDFT!*\n\nType: String                                                       Level: Basic\n\nSelects whether or not the Tamm-Dancoff approximation is used in a TDDFT calculation\nModifiable: restart and on the fly\nAllowed values: TAMM-DANCOFF, FULL\nDefault value : TAMM-DANCOFF\n\n", "key_level": "basic", "value_type": "string"}, "num_backup_iter": {"key_type": "PARAM", "help_short": "md/geom iterations between backups", "help_full": "            NUM_BACKUP_ITER   *! md/geom iterations between backups!*\n\nType: Integer                                                      Level: Basic\n\nSpecifies the number of iterations between backups of all data for restarts,  for a geometry optimization or molecular dynamics run.\nModifiable: restart and on the fly\nAllowed values: (any intger) > 0\nDefault value : 5\n\n", "key_level": "basic", "value_type": "integer"}, "checkpoint": {"key_type": "PARAM", "help_short": "checkpoint filename", "help_full": "                      CHECKPOINT   *! checkpoint filename!*\n\nType: String                                                       Level: Basic\n\nThe name of file to write current_params%checkpoint (current_params%continuation data) to.\nModifiable: restart and on the fly\nAllowed values: up to 255 character filename\nDefault value : <seedname>.check\n\n", "key_level": "basic", "value_type": "string"}, "kpoints_list": {"key_type": "CELL", "help_short": "SCF k-points", "help_full": "                        KPOINTS_LIST   *! SCF k-points !*\n\nType: Block                                                        Level: Basic\n\nA list of k-points in the brillouin zone (with associated weights)  used for BZ integration during and SCF calculation.  The k-point weights must sum to 1.\nExample:\n%block kpooints_list\n0.25  0.25  0.25  0.25 ! kx ky kz weight\n0.25 -0.25  0.25  0.25\n0.25  0.25 -0.25  0.25\n0.25 -0.25 -0.25  0.25\n%endblock kpooints_list\n\nDefault value: Generated from KPOINTS_MP_SPACING and the crystal symmetry.\n", "key_level": "basic", "value_type": "block"}, "optics_kpoint_mp_offset": {"key_type": "CELL", "help_short": "Alias for OPTICS_KPOINTS_MP_OFFSET", "help_full": "       OPTICS_KPOINT_MP_OFFSET   *! Alias for OPTICS_KPOINTS_MP_OFFSET !*\n\nType: Real Vector                                                  Level: Basic\n\nDefault value: Determined from OPTICS_KPOINTS_MP_OFFSET\n", "key_level": "basic", "value_type": "real"}, "write_geom": {"key_type": "PARAM", "help_short": "output geom file", "help_full": "                       WRITE_GEOM   *! output geom file!*\n\nType: Boolean (Logical)                                            Level: Basic\n\nSpecifies whether or not to write out the geometry trajectory file for this run if TASK=GEOM-OPT.\nModifiable: restart and on the fly\nAllowed values: TRUE or FALSE\nDefault value : TRUE\n\n", "key_level": "basic", "value_type": "boolean"}, "phonon_kpoint_mp_grid": {"key_type": "CELL", "help_short": "Phonon wavevector Monkhorst-Pack grid", "help_full": "       PHONON_KPOINT_MP_GRID   *! Phonon wavevector Monkhorst-Pack grid !*\n\nType: Integer Vector                                               Level: Basic\n\nThe phonon wavevectors defined by a Monkhorst-Pack grid.  Symmetry (if specified) will be used to generate the wavevector list and weights.\n", "key_level": "basic", "value_type": "integer"}, "magres_write_response": {"key_type": "PARAM", "help_short": "Write current to file", "help_full": "               MAGRES_WRITE_RESPONSE   *! Write current to file!*\n\nType: Boolean (Logical)                                     Level: Intermediate\n\nSpecifies whether or not to write out the induced current to file.\nModifiable: restart and on the fly\nAllowed values: TRUE or FALSE\nDefault value : FALSE\n\n", "key_level": "intermediate", "value_type": "boolean"}, "lattice_abc": {"key_type": "CELL", "help_short": "Lattice vectors - ABC", "help_full": "                    LATTICE_ABC   *! Lattice vectors - ABC !*\n\nType: Block                                                        Level: Basic\n\nThe lattice vectors specified in a,b,c,alpha,beta,gamma format.  Optionally, length units may be specified on the first line\n\nExample:\n%block lattice_abc\nAng\n5.4 5.4 5.4\n90.0 90.0 90.0\n%endblock lattice_abc\n\nDefault value: None, Default units: Angstroms.\n", "key_level": "basic", "value_type": "block"}, "supercell_kpoint_mp_offset": {"key_type": "CELL", "help_short": "Alias for SUPERCELL_KPOINTS_MP_OFFSET", "help_full": "    SUPERCELL_KPOINT_MP_OFFSET   *! Alias for SUPERCELL_KPOINTS_MP_OFFSET !*\n\nType: Real Vector                                                  Level: Basic\n\nDefault value: Determined from SUPERCELL_KPOINTS_MP_OFFSET\n", "key_level": "basic", "value_type": "real"}, "page_wvfns": {"key_type": "PARAM", "help_short": "page wavefunctions to disk", "help_full": "                  PAGE_WVFNS   *! page wavefunctions to disk!*\n\nType: Integer                                               Level: Intermediate\n\nControls the paging of wavefunctions to disk.\nIf >0, then all wavefunctions  greater than given size (in MB) will be paged to disk.\nIf =0, then no paging will be done.\nIf <0, then all wavefunctions, regardless of size, will be paged to disk.\nModifiable: restart only\nAllowed values: (any integer)\nDefault value : 0\n\n", "key_level": "intermediate", "value_type": "integer"}, "spectral_max_iter": {"key_type": "PARAM", "help_short": "maximum iterations in band structure calculation", "help_full": "    SPECTRAL_MAX_ITER   *! maximum iterations in band structure calculation!*\n\nType: Integer                                                      Level: Basic\n\nDetermines the maximum number of iterations to perform when calculating band structure.\nModifiable: restart and on the fly\nAllowed values: (any integer) > 0\nDefault value : 60\n\n", "key_level": "basic", "value_type": "integer"}, "md_nose_t": {"key_type": "PARAM", "help_short": "OBSOLETE", "help_full": "                           MD_NOSE_T   *! OBSOLETE !*\n\nType: Physical                                              Level: Intermediate\n\nNB This is an OBSOLETE form - please use MD_ION_T instead.\n\n", "key_level": "intermediate", "value_type": "physical"}, "sedc_d_ts": {"key_type": "PARAM", "help_short": "d value for TS semi-empirical dispersion/vdW correction scheme", "help_full": " SEDC_D_TS   *! d value for TS semi-empirical dispersion/vdW correction scheme !*\n\nType: Real                                                        Level: Expert\n\nCustomisable d value for the damping function in the TS  semi-empirical dispersion/van der Waals correction scheme.\nModifiable: restart and on the fly\nDefault is determined by XC_FUNCTIONAL.\n\n", "key_level": "expert", "value_type": "real"}, "efermi_tol": {"key_type": "PARAM", "help_short": "Fermi-energy convergence tolerance", "help_full": "              EFERMI_TOL   *! Fermi-energy convergence tolerance!*\n\nType: Physical                                              Level: Intermediate\n\nTolerance for accepting convergence of the Fermi-energy during if not  FIX_OCCUPANCY calculation.\nModifiable: restart and on the fly\nAllowed values: (any) > 0.0\nDefault value : 0.1 * ELEC_EIGENVALUE_TOL\n\n", "key_level": "intermediate", "value_type": "physical"}, "force_constant_unit": {"key_type": "PARAM", "help_short": "unit of force constant in output", "help_full": "           FORCE_CONSTANT_UNIT   *! unit of force constant in output!*\n\nType: String                                                Level: Intermediate\n\nControls the units used for all force constants in output - many different  units are supported.\nModifiable: restart and on the fly\nDefault value : EV/ANG**2\n\n", "key_level": "intermediate", "value_type": "string"}, "time_unit": {"key_type": "PARAM", "help_short": "unit of time in output", "help_full": "                     TIME_UNIT   *! unit of time in output!*\n\nType: String                                                Level: Intermediate\n\nControls the units used for all times in output - many different units are  supported.\nModifiable: restart and on the fly\nDefault value : PS\n\n", "key_level": "intermediate", "value_type": "string"}, "efield_ignore_molec_modes": {"key_type": "PARAM", "help_short": "Ignore lowest modes in permittivity calc", "help_full": "    EFIELD_IGNORE_MOLEC_MODES   *! Ignore lowest modes in permittivity calc!*\n\nType: String                                                Level: Intermediate\n\nIgnore the lowest lying (3,5,6) modes when computing the ionic contribution to  the permittivity and polarizability.\nModifiable: restart and on the fly\nAllowed values: CRYSTAL, MOLECULE, LINEAR_MOLECULE\nDefault value : CRYSTAL\n\n", "key_level": "intermediate", "value_type": "string"}, "max_cg_steps": {"key_type": "PARAM", "help_short": "max. number of conjugate gradient steps", "help_full": "           MAX_CG_STEPS   *! max. number of conjugate gradient steps!*\n\nType: Integer                                               Level: Intermediate\n\nThe maximum number of conjugate gradient steps in an SCF cycle.\nModifiable: restart and on the fly\nAllowed values: (any integer) >=0\nDefault value : set by ELECTRONIC_MINIMIZER\n\n", "key_level": "intermediate", "value_type": "integer"}, "quantisation_axis": {"key_type": "CELL", "help_short": "quantisation (magnetization) axis in fractional coordinates", "help_full": " QUANTISATION_AXIS   *! quantisation (magnetization) axis in fractional coordinat\n\nType: Real Vector                                                  Level: Basic\n\nDefault value: along c vector\n", "key_level": "basic", "value_type": "real"}, "hubbard_alpha": {"key_type": "CELL", "help_short": "The Hubbard alpha for specific ion and orbital", "help_full": "      HUBBARD_ALPHA   *! The Hubbard alpha for specific ion and orbital !*\n\nType: Block                                                        Level: Basic\n\nUsed in determining the Hubbard U for DFT+U calculations. Default value for all orbitals on all species is zero.\n", "key_level": "basic", "value_type": "block"}, "bs_re_est_k_scrn": {"key_type": "PARAM", "help_short": "re-estimate k-screening length before BS run", "help_full": "      BS_RE_EST_K_SCRN   *! re-estimate k-screening length before BS run !*\n\nType: Boolean (Logical)                                     Level: Intermediate\n\n(See description of NLXC_RE_EST_K_SCRN). If this is true then the screening length  will be re-estimated from the density before a bandstructure calculation.\n(If NLXC_RE_EST_K_SCRN is also true then this should have no effect.)\nModifiable: restart only\nAllowed values: TRUE or FALSE\nDefault value : FALSE\n\n", "key_level": "intermediate", "value_type": "boolean"}, "write_formatted_elf": {"key_type": "PARAM", "help_short": "formatted ELF on/off", "help_full": "                 WRITE_FORMATTED_ELF   *! formatted ELF on/off!*\n\nType: Boolean (Logical)                                            Level: Basic\n\nIf CALCULATE_ELF is TRUE then ELF is always written out to unformatted file.\nSpecifies whether or not to write out ELF to formatted file in addition.\nModifiable: restart and on the fly\nAllowed values: TRUE or FALSE\nDefault value : FALSE\n\n", "key_level": "basic", "value_type": "boolean"}, "length_unit": {"key_type": "PARAM", "help_short": "unit of length in output", "help_full": "                   LENGTH_UNIT   *! unit of length in output!*\n\nType: String                                                Level: Intermediate\n\nControls the units used for all lengths in output - many different units  are supported.\nModifiable: restart and on the fly\nDefault value : ANG\n\n", "key_level": "intermediate", "value_type": "string"}, "spectral_eigenvalue_tol": {"key_type": "PARAM", "help_short": "spectral convergence tolerance", "help_full": "          SPECTRAL_EIGENVALUE_TOL   *! spectral convergence tolerance!*\n\nType: Physical                                                     Level: Basic\n\nTolerance for accepting convergence of a single eigenvalue/band during  electronic spectroscopy calculation. The difference between max and min energies over  current_params%elec_convergence_win iterations must be less than this.\nModifiable: restart and on the fly\nAllowed values: (any) > 0.0\nDefault value : 10^-6 eV/eigenvalue\n\n", "key_level": "basic", "value_type": "physical"}, "exchange_reflect_kpts": {"key_type": "PARAM", "help_short": "OBSOLETE", "help_full": "                     EXCHANGE_REFLECT_KPTS   *! OBSOLETE !*\n\nType: Boolean (Logical)                                     Level: Intermediate\n\nNB This is an OBSOLETE form - please use NLXC_EXCHANGE_REFLECT_KPTS instead.\n\n", "key_level": "intermediate", "value_type": "boolean"}, "bs_kpoint_mp_grid": {"key_type": "CELL", "help_short": "Band structure Monkhorst-Pack grid", "help_full": "          BS_KPOINT_MP_GRID   *! Band structure Monkhorst-Pack grid !*\n\nType: Integer Vector                                               Level: Basic\n\nThe k-points defined by a Monkhorst-Pack grid for a band stucture calculation.  This is mainly used for density of states calculations.  Default value: Determined from BS_KPOINT_SPACING.\n", "key_level": "basic", "value_type": "integer"}, "elec_convergence_win": {"key_type": "PARAM", "help_short": "convergence tolerance window", "help_full": "            ELEC_CONVERGENCE_WIN   *! convergence tolerance window!*\n\nType: Integer                                               Level: Intermediate\n\nThe electronic convergence criteria must be met for ELEC_CONVERGENCE_WIN  iterations before acceptance.\nModifiable: restart and on the fly\nAllowed values: (any integer) >= 2\nDefault value : 3\n\n", "key_level": "intermediate", "value_type": "integer"}, "write_bands": {"key_type": "PARAM", "help_short": "output bands file", "help_full": "                      WRITE_BANDS   *! output bands file!*\n\nType: Boolean (Logical)                                            Level: Basic\n\nSpecifies whether or not to write out the bands file for this run.\nModifiable: restart and on the fly\nAllowed values: TRUE or FALSE\nDefault value : TRUE\n\n", "key_level": "basic", "value_type": "boolean"}, "spin_orbit_coupling": {"key_type": "PARAM", "help_short": "use spin-orbit coupling (T) or not (F)", "help_full": "       SPIN_ORBIT_COUPLING   *! use spin-orbit coupling (T) or not (F) !*\n\nType: Boolean (Logical)                                            Level: Basic\n\nDetermines whether to use spin-orbit coupling or not.\nModifiable: never\nAllowed values: TRUE or FALSE\nDefault value : FALSE\n\n", "key_level": "basic", "value_type": "boolean"}, "tssearch_cg_max_iter": {"key_type": "PARAM", "help_short": "max CG steps in QST search", "help_full": "             TSSEARCH_CG_MAX_ITER   *! max CG steps in QST search!*\n\nType: Integer                                               Level: Intermediate\n\nThe maximum number of CG steps during an LST/QST search.\nModifiable: restart and on the fly\nAllowed values: (any integer) > 0\nDefault value : 20\n\n", "key_level": "intermediate", "value_type": "integer"}, "thermo_t_stop": {"key_type": "PARAM", "help_short": "Final temperature", "help_full": "                     THERMO_T_STOP   *! Final temperature!*\n\nType: Physical                                                     Level: Basic\n\nThe desired final temperature for the thermodynamics calculation.\nModifiable: restart and on the fly\nAllowed values: (any) >= THERMO_T_START\nDefault value : 298 K\n\n", "key_level": "basic", "value_type": "physical"}, "nlxc_ppd_size_z": {"key_type": "PARAM", "help_short": "z-size of parallelepiped", "help_full": "                NLXC_PPD_SIZE_Z   *! z-size of parallelepiped !*\n\nType: Integer                                               Level: Intermediate\n\nThe number of points in z-direction at which to sample parallelepiped  when performing ppd integration.\nModifiable: restart only\nAllowed values: (any integer) > 0\nDefault value : 8\n\n", "key_level": "intermediate", "value_type": "integer"}, "nlxc_ppd_size_x": {"key_type": "PARAM", "help_short": "x-size of parallelepiped", "help_full": "                NLXC_PPD_SIZE_X   *! x-size of parallelepiped !*\n\nType: Integer                                               Level: Intermediate\n\nThe number of points in x-direction at which to sample parallelepiped  when performing ppd integration.\nModifiable: restart only\nAllowed values: (any integer) > 0\nDefault value : 8\n\n", "key_level": "intermediate", "value_type": "integer"}, "nlxc_ppd_size_y": {"key_type": "PARAM", "help_short": "y-size of parallelepiped", "help_full": "                NLXC_PPD_SIZE_Y   *! y-size of parallelepiped !*\n\nType: Integer                                               Level: Intermediate\n\nThe number of points in y-direction at which to sample parallelepiped  when performing ppd integration.\nModifiable: restart only\nAllowed values: (any integer) > 0\nDefault value : 8\n\n", "key_level": "intermediate", "value_type": "integer"}, "metals_method": {"key_type": "PARAM", "help_short": "treatment of metals or finite temperature insulator", "help_full": "    METALS_METHOD   *! treatment of metals or finite temperature insulator!*\n\nType: String                                                       Level: Basic\n\nThe treatment of metals or finite temperature insulator to be used.\nModifiable: restart and on the fly\nAllowed values: NONE (=ALLBANDS), DM, EDFT\nDefault value : DM\n\n", "key_level": "basic", "value_type": "string"}, "phonon_calc_lo_to_splitting": {"key_type": "PARAM", "help_short": "gamma-point phonon LO/TO correction", "help_full": "     PHONON_CALC_LO_TO_SPLITTING   *! gamma-point phonon LO/TO correction !*\n\nType: Boolean (Logical)                                     Level: Intermediate\n\nSelects whether to compute non-analytic contribution to dynamical matrix from  long-ranged electric field effects responsible for LO/TO splitting.\nThis requires calculation of the dielectric permittivity by efield linear-response  and the Born effective charges.\nModifiable: restart and on the fly\nAllowed values: TRUE or FALSE\nDefault value : TRUE\n\n", "key_level": "intermediate", "value_type": "boolean"}, "md_eqm_method": {"key_type": "PARAM", "help_short": "MD enhanced equilibration method", "help_full": "              MD_EQM_METHOD   *! MD enhanced equilibration method!*\n\nType: String                                                       Level: Basic\n\nSpecify a enhanced scheme for speeding equilibration which does not  necessarily conform to any ensemble.\nModifiable: restart and on the fly\nAllowed values: NONE, BERENDSEN\nDefault value : NONE\n\n", "key_level": "basic", "value_type": "string"}, "md_hug_method": {"key_type": "PARAM", "help_short": "Hugoniostat method", "help_full": "                     MD_HUG_METHOD   *! Hugoniostat method!*\n\nType: String                                                       Level: Basic\n\nSpecify a non-equilibrium scheme for finding states on the Hugoniot.\nThe cell is compressed according to scheme to generate a specific temperature and pressure.\nThe dynamics do not conform to any ensemble.\nModifiable: restart only\nAllowed values: NONE, NVHUG, NPHUG\nDefault value : NONE\n\n", "key_level": "basic", "value_type": "string"}, "geom_lbfgs_max_updates": {"key_type": "PARAM", "help_short": "max number of LBFGS updates stored", "help_full": "        GEOM_LBFGS_MAX_UPDATES   *! max number of LBFGS updates stored!*\n\nType: Integer                                                      Level: Basic\n\nIf GEOM_METHOD=LBFGS then only store GEOM_LBFGS_MAX_UPDATES number of updates.\nIf GEOM_LBFGS_MAX_UPDATES=0 then the number of updates stored will grow as required.\nModifiable: restart and on the fly\nAllowed values: (any integer) >= 0\nDefault value : 0\n\n", "key_level": "basic", "value_type": "integer"}, "positions_frac_product": {"key_type": "CELL", "help_short": "Transition state search product", "help_full": "         POSITIONS_FRAC_PRODUCT   *! Transition state search product !*\n\nType: Block                                                        Level: Basic\n\nThe species and positions of the atoms, in fractional coordinates,  for the transition state product.  Default value: The initial atomic positions.\n", "key_level": "basic", "value_type": "block"}, "kpoints_mp_grid": {"key_type": "CELL", "help_short": "SCF Monkhorst-Pack grid", "help_full": "                 KPOINTS_MP_GRID   *! SCF Monkhorst-Pack grid !*\n\nType: Integer Vector                                               Level: Basic\n\nThe k-points defined by a Monkhorst-Pack grid.  Symmetry (if specified) will be used to generate the SCF k-point list and weights.\nExample:\nkpoints_mp_grid 4 3 6\n\nDefault value: Generated from KPOINTS_MP_SPACING.\n", "key_level": "basic", "value_type": "integer"}, "phonon_max_cycles": {"key_type": "PARAM", "help_short": "maximum cycles in LR", "help_full": "                  PHONON_MAX_CYCLES   *! maximum cycles in LR!*\n\nType: Integer                                               Level: Intermediate\n\nThe maximum number of SCF cycles in PHONON calculation regardless of convergence.\nModifiable: restart and on the fly\nAllowed values: (any integer) >= 0 or if TASK=PHONON etc >= PHONON_CONVERGENCE_WIN\nDefault value : 50\n\n", "key_level": "intermediate", "value_type": "integer"}, "phonon_fine_kpoint_path_spacing": {"key_type": "CELL", "help_short": "The fine spacing of points on a path at which phonons are calculated", "help_full": " PHONON_FINE_KPOINT_PATH_SPACING   *! The fine spacing of points on a path at whi\n\nType: Physical                                                     Level: Basic\n\nThe spacing of k-points along a path (specified by PHONON_FINE_KPOINT_PATH) at which phonons will be interpolated from a coarser grid\n", "key_level": "basic", "value_type": "physical"}, "opt_strategy": {"key_type": "PARAM", "help_short": "optimization strategy", "help_full": "                    OPT_STRATEGY   *! optimization strategy!*\n\nType: String                                                Level: Intermediate\n\nControls the optimization strategy used.\nModifiable: restart only\nAllowed values: DEFAULT, SPEED, MEMORY\nDefault value : DEFAULT\n\n", "key_level": "intermediate", "value_type": "string"}, "raman_method": {"key_type": "PARAM", "help_short": "Raman tensor calculation method", "help_full": "              RAMAN_METHOD   *! Raman tensor calculation method !*\n\nType: String                                                Level: Intermediate\n\nSelects the method for applying 2n+1 solver for Raman tensor calculation.\nModifiable: restart only\nAllowed values: DFPT or FINITEDISPLACEMENT\nDefault value : FINITEDISPLACEMENT\n\n", "key_level": "intermediate", "value_type": "string"}, "volume_unit": {"key_type": "PARAM", "help_short": "unit of volume in output", "help_full": "                   VOLUME_UNIT   *! unit of volume in output!*\n\nType: String                                                Level: Intermediate\n\nControls the units used for all volumes in output - many different units are  supported.\nModifiable: restart and on the fly\nDefault value : ANG**3\n\n", "key_level": "intermediate", "value_type": "string"}, "secondd_method": {"key_type": "PARAM", "help_short": "OBSOLETE", "help_full": "                         SECONDD_METHOD   *! OBSOLETE !*\n\nType: String                                                       Level: Basic\n\nDeprecated keyword - please use PHONON_METHOD instead\n\n", "key_level": "basic", "value_type": "string"}, "num_proc_in_smp_fine": {"key_type": "PARAM", "help_short": "number of processors in SMP node", "help_full": "          NUM_PROC_IN_SMP_FINE   *! number of processors in SMP node !*\n\nType: Integer                                                     Level: Expert\n\nSpecifies the maximum number of active processors per node for fine grid  in an SMP-aware calculation.\nModifiable: restart only\nAllowed values: (any integer) > 0\nDefault value : NUM_PROC_IN_SMP\n\n", "key_level": "expert", "value_type": "integer"}, "phonon_kpoint_list": {"key_type": "CELL", "help_short": "List of phonon k-points", "help_full": "               PHONON_KPOINT_LIST   *! List of phonon k-points !*\n\nType: Block                                                        Level: Basic\n\nA list of discrete k-points at which phonon frequencies and eigenvectors will be calculated.\nExample:\n%block phonon_kpoint_list\n0.00000000   0.00000000   0.00000000 ! A path from Gamma to X\n0.10000000   0.00000000   0.00000000\n0.20000000   0.00000000   0.00000000\n0.30000000   0.00000000   0.00000000\n0.40000000   0.00000000   0.00000000\n0.50000000   0.00000000   0.00000000\n%endblock phonon_kpoint_list\n\nDefault value: SCF k-points are used if an alternative PHONON_KPOINT_* specifier is not given.\n", "key_level": "basic", "value_type": "block"}, "nelectrons": {"key_type": "PARAM", "help_short": "number of electrons", "help_full": "                      NELECTRONS   *! number of electrons!*\n\nType: Real                                                         Level: Basic\n\nTotal number of electrons in the system.  Can also be determined by CHARGE, NUP and NDOWN.\nNot restricted to integer values. Default is to make the system neutral.\nModifiable: never\nAllowed values: (any) > 0.0\nDefault value : set by IONIC_CHARGE in cell file\n\n", "key_level": "basic", "value_type": "real"}, "symmetry_tol": {"key_type": "CELL", "help_short": "Symmetry Tolerance", "help_full": "                     SYMMETRY_TOL   *! Symmetry Tolerance !*\n\nType: Physical                                                     Level: Basic\n\nThe maximum tolerance used when searching for symmetry operations.  Units of length must be specified  Example:\nsymmetry_tol 0.001 ang\n\nDefault value: 0.01 ang.\n", "key_level": "basic", "value_type": "physical"}, "nonlinear_constraints": {"key_type": "CELL", "help_short": "Constrains on bonds, angles and torsions", "help_full": "     NONLINEAR_CONSTRAINTS   *! Constrains on bonds, angles and torsions !*\n\nType: Block                                                        Level: Basic\n\nA list of the constraints on the motion of the ions  during relaxation.  Default value: None.\n", "key_level": "basic", "value_type": "block"}, "supercell_kpoints_mp_grid": {"key_type": "CELL", "help_short": "SCF Monkhorst-Pack grid for FD phonon supercell calculation", "help_full": " SUPERCELL_KPOINTS_MP_GRID   *! SCF Monkhorst-Pack grid for FD phonon supercell c\n\nType: Integer Vector                                               Level: Basic\n\nThe k-points defined by a Monkhorst-Pack grid when doing a finite displacement phonon calculation.  Symmetry (if specified) will be used to generate the k-point list and weights.  Default value: Generated from SUPERCELL_KPOINTS_MP_SPACING.\n", "key_level": "basic", "value_type": "integer"}, "md_langevin_t": {"key_type": "PARAM", "help_short": "OBSOLETE", "help_full": "                         MD_LANGEVIN_T   *! OBSOLETE !*\n\nType: Physical                                                     Level: Basic\n\nNB This is an OBSOLETE form - please use MD_ION_T instead.\n\n", "key_level": "basic", "value_type": "physical"}, "species_pot": {"key_type": "CELL", "help_short": "Specification of the pseudopotentials to be used", "help_full": "      SPECIES_POT   *! Specification of the pseudopotentials to be used !*\n\nType: Block                                                        Level: Basic\n\nPseudopotentials may be specified individually per species or for every  element from internal or external libraries.\n\nA line containing a single word without spaces is interpreted as a default library\nExample:\n%block species_pot\nC9              ! The name of a built-in library C17/C9/C8/C7/MS/HARD/QC5/NCP17/NPC9\n%endblock species_pot\nor\n%block species_pot\nMypots.otfglib  ! The name of a file containing an OTGF pseudopotential library\n%endblock species_pot\n\nEach line containing two words is interpreted as a species/pseudopotential pair.\nExample:\n%block species_pot\nSi C9              ! Use Si entry from the built-in \"C9\" library for this species\n%endblock species_pot\nor\n%block species_pot\nSi Mypots.otfglib  ! Use entry from external library for this species\n%endblock species_pot\nor\n%block species_pot\nSi Si_00.usp       ! Read pre-generated pseudopotential from file.\n%endblock species_pot\nAllowed file formats are \".usp\", \".uspcc\", \".uspso\", \".recpot\", \".upf\", \".DAT\", \".data\"\nor\n%block species_pot\nSi 2|1.2|23|26|29|20U:21U:30:31(qc=8)[] ! Generate OTFG pseudopotential from specification in string.\n%endblock species_pot\n\nAny of the above overrides the default or explicit library.\n\nCASTEP searches for external pseudopotential files and libraries in the current working  directory and in a list of directories specified using the run-time environment  variable PSPOT_DIR.\n\nDefault value: If unspecified, the C9 built-in (on-the-fly) ultrasoft pseudopotential will be used.\n", "key_level": "basic", "value_type": "block"}, "external_pressure": {"key_type": "CELL", "help_short": "External pressure", "help_full": "                   EXTERNAL_PRESSURE   *! External pressure !*\n\nType: Block                                                        Level: Basic\n\nThe exernal pressure tensor applied to the cell during a molecular dynamics or  geometry optimisation. Shear stresses can also be applied (off-diagonal terms).  Optionally, units of pressure may also be given.\n%block external_pressure\nGPa ! Units optional\n4.0 0.0 0.0 ! Isotropic presssure of 4GPa\n4.0 0.0 ! Only upper half of 3x3 matrix specified\n4.0 ! Castep makes symetric lower half\n%endblock external_pressure\nDefault value: 0.0 GPa\n", "key_level": "basic", "value_type": "block"}, "tssearch_max_path_points": {"key_type": "PARAM", "help_short": "max number of path points in NEB  search", "help_full": "    TSSEARCH_MAX_PATH_POINTS   *! max number of path points in NEB  search!*\n\nType: Integer                                               Level: Intermediate\n\nThe maximum number of path points for NEB search.\nModifiable: restart and on the fly\nAllowed values: (any integer) > 0\nDefault value : 20\n\n", "key_level": "intermediate", "value_type": "integer"}, "phonon_write_force_constants": {"key_type": "PARAM", "help_short": "Write out real-space force constant matrix", "help_full": " PHONON_WRITE_FORCE_CONSTANTS   *! Write out real-space force constant matrix !*\n\nType: Boolean (Logical)                                            Level: Basic\n\nSelects whether to write out the real-space force constant matrix from a  phonon supercell or interpolation calculation (to the <seedname>.castep file).\nModifiable: restart and on the fly\nAllowed values: TRUE or FALSE\nDefault value : FALSE\n\n", "key_level": "basic", "value_type": "boolean"}, "tddft_max_iter": {"key_type": "PARAM", "help_short": "maximum number of iterations in TDDFT calculation", "help_full": "     TDDFT_MAX_ITER   *! maximum number of iterations in TDDFT calculation!*\n\nType: Integer                                               Level: Intermediate\n\nThe maximum number of iterations to take during a TDDFT calculation.\nModifiable: restart and on the fly\nAllowed values: (any integer) > TDDFT_CONVERGENCE_WIN\nDefault value : 50 for Davidson solver, 200 for CG solver\n\n", "key_level": "intermediate", "value_type": "integer"}, "magres_method": {"key_type": "PARAM", "help_short": "crystal or molecular position operator", "help_full": "           MAGRES_METHOD   *! crystal or molecular position operator!*\n\nType: String                                                       Level: Basic\n\nSelects which method to use for the position operator.\nModifiable: restart and on the fly\nAllowed values: CRYSTAL, MOLECULAR, MOLECULAR3\nDefault value : CRYSTAL\n\n", "key_level": "basic", "value_type": "string"}, "magres_kpoint_mp_grid": {"key_type": "CELL", "help_short": "The Monkhorst-Pack grid for magnetic resonance k-points", "help_full": " MAGRES_KPOINT_MP_GRID   *! The Monkhorst-Pack grid for magnetic resonance k-poin\n\nType: Integer Vector                                               Level: Basic\n\nThe grid defining the Monkhorst-Pack set of k-points at which the magnetic resonance calculations will be performed.\n", "key_level": "basic", "value_type": "integer"}, "elnes_xc_functional": {"key_type": "PARAM", "help_short": "elnes exchange-correlation functional", "help_full": "        ELNES_XC_FUNCTIONAL   *! elnes exchange-correlation functional!*\n\nType: String                                                       Level: Basic\n\nThe functional to use when calculating the exchange-correlation potential during an elnes calculation.\nAllowed values: LDA, PW91, PBE, PBESOL, RPBE, WC, BLYP, ZERO, WDA.\nIn addition, we now support libXC and all the non-hybrid functionals therein.\nModifiable: restart only\nDefault value : set by XC_FUNCTIONAL\n\n", "key_level": "basic", "value_type": "string"}, "spectral_max_steps_per_iter": {"key_type": "PARAM", "help_short": "maximum steps per iter in spectral calculation", "help_full": " SPECTRAL_MAX_STEPS_PER_ITER   *! maximum steps per iter in spectral calculation!\n\nType: Integer                                               Level: Intermediate\n\nThe maximum number of steps to take per iteration in the electronic  minimizer, before resetting to the steepest descents direction, when doing an  electronic spectroscopy calculation.\nModifiable: restart and on the fly\nAllowed values: (any integer) > 0\nDefault value : 5\n\n", "key_level": "intermediate", "value_type": "integer"}, "spectral_kpoints_mp_grid": {"key_type": "CELL", "help_short": "Alias for SPECTRAL_KPOINT_MP_GRID", "help_full": "       SPECTRAL_KPOINTS_MP_GRID   *! Alias for SPECTRAL_KPOINT_MP_GRID !*\n\nType: Integer Vector                                               Level: Basic\n\nDefault value: Determined from SPECTRAL_KPOINT_MP_GRID\n", "key_level": "basic", "value_type": "integer"}, "magres_convergence_win": {"key_type": "PARAM", "help_short": "convergence tolerance window in magres calc", "help_full": "    MAGRES_CONVERGENCE_WIN   *! convergence tolerance window in magres calc!*\n\nType: Integer                                               Level: Intermediate\n\nThe magres convergence criteria must be met for MAGRES_CONVERGENCE_WIN iterations  before acceptance.\nModifiable: restart and on the fly\nAllowed values: (any integer) >= 2\nDefault value : 2\n\n", "key_level": "intermediate", "value_type": "integer"}, "stop": {"key_type": "PARAM", "help_short": "abort run", "help_full": "                              STOP   *! abort run!*\n\nType: Defined                                                      Level: Basic\n\nIf defined, will cause the current run to be aborted as if the maximum runtime had been exceeded.\nOnly valid during re-read of input file.\n\n", "key_level": "basic", "value_type": "defined"}, "finite_basis_spacing": {"key_type": "PARAM", "help_short": "finite cut-off energy spacing in automatic basis correction", "help_full": " FINITE_BASIS_SPACING   *! finite cut-off energy spacing in automatic basis corre\n\nType: Physical                                              Level: Intermediate\n\nDetermines the spacing of cut-off energies used to estimate BASIS_DE_DLOGE in  automatic finite basis set correction. Energies will be chosen s.t. final  calculation has cut-off energy used in run.\nModifiable: restart only\nAllowed values: (any) > 0.0\nDefault value : 5.0 eV\n\n", "key_level": "intermediate", "value_type": "physical"}, "electronic_minimizer": {"key_type": "PARAM", "help_short": "electronic minimization method", "help_full": "           ELECTRONIC_MINIMIZER   *! electronic minimization method!*\n\nType: String                                                       Level: Basic\n\nThe electron minimization method to use.\nModifiable: restart and on the fly\nAllowed values: SD, CG, RMM/DIIS\nDefault value : CG\n\n", "key_level": "basic", "value_type": "string"}, "ga_fixed_n": {"key_type": "PARAM", "help_short": "GA fixed number of atoms", "help_full": "                   GA_FIXED_N   *! GA fixed number of atoms!*\n\nType: Boolean (Logical)                                            Level: Basic\n\nSpecifies whether or not the number of atoms in each GA child is constant or  allowed to vary.\nModifiable: restart and on the fly\nAllowed values: TRUE or FALSE\nDefault value : TRUE\n\n", "key_level": "basic", "value_type": "boolean"}, "species_mass": {"key_type": "CELL", "help_short": "Atomic mass", "help_full": "                        SPECIES_MASS   *! Atomic mass !*\n\nType: Block                                                        Level: Basic\n\nThe mass of the atomic species used in the simulation.  Optionally, units of mass may be specified.\nExample:\n%block species_mass\namu  ! units optional\nH 2.01410178 ! Deuterium instead of hydrogen\n%endblock cell_constraints\n\nDefault value: Standard masses of the elements. Default units: amu\n", "key_level": "basic", "value_type": "block"}, "calculate_born_charges": {"key_type": "PARAM", "help_short": "calculate Born effective charges", "help_full": "         CALCULATE_BORN_CHARGES   *! calculate Born effective charges !*\n\nType: Boolean (Logical)                                            Level: Basic\n\nSelects whether to compute Born effective charge tensors as part of a phonon  or efield linear-response calculation.\nModifiable: restart and on the fly\nAllowed values: TRUE or FALSE\nDefault value : TRUE\n\n", "key_level": "basic", "value_type": "boolean"}, "wannier_ion_cut_fraction": {"key_type": "PARAM", "help_short": "Ion density fraction for truncated integration", "help_full": " WANNIER_ION_CUT_FRACTION   *! Ion density fraction for truncated integration !*\n\nType: Real                                                         Level: Basic\n\nIn the real-space integration for the calculation of ion moments only this  fraction of ion density will be included.\nModifiable: restart and on the fly\nAllowed values: 0.0 < WANNIER_ION_CUT_FRACTION < 1.0\nDefault value : 0.999\n\n", "key_level": "basic", "value_type": "real"}, "sedc_lambda_obs": {"key_type": "PARAM", "help_short": "lambda value for OBS semi-empirical dispersion/vdW correction scheme", "help_full": " SEDC_LAMBDA_OBS   *! lambda value for OBS semi-empirical dispersion/vdW correcti\n\nType: Real                                                        Level: Expert\n\nCustomisable lambda value for damping function in the the OBS  semi-empirical dispersion/van der Waals correction scheme.\nModifiable: restart and on the fly\nDefault is determined by XC_FUNCTIONAL.\n\n", "key_level": "expert", "value_type": "real"}, "nup": {"key_type": "PARAM", "help_short": "number of up spins", "help_full": "                          NUP   *! number of up spins!*\n\nType: Real                                                         Level: Basic\n\nThe total number of up-spin electrons.  Can also be determined by CHARGE and SPIN.\nModifiable: never\nAllowed values: (any) >= 0.0\nDefault value : NELECTRONS/2\n\n", "key_level": "basic", "value_type": "real"}, "pressure_unit": {"key_type": "PARAM", "help_short": "unit of pressure in output", "help_full": "                 PRESSURE_UNIT   *! unit of pressure in output!*\n\nType: String                                                Level: Intermediate\n\nControls the units used for all pressures in output - many different units  are supported.\nModifiable: restart and on the fly\nDefault value :  GPA\n\n", "key_level": "intermediate", "value_type": "string"}, "positions_abs": {"key_type": "CELL", "help_short": "Atomic positions", "help_full": "                     POSITIONS_ABS   *! Atomic positions !*\n\nType: Block                                                        Level: Basic\n\nThe species followed by the atomic position in abolute coordinates.  The species may be given as the chemical symbol or atomic number.  Optionally, length units may be specified on the first line\nExample:\n%block positions_abs\nSi 1.5 1.5 1.5\n%endblock positions_abs\nor\n%block positions_abs\nAng\nSi 1.5 1.5 1.5\n%endblock positions_abs\n\nOptional modifiers may be appended to each line to individually specify\n(a) initial spin\nExample:\n%block positions_abs\nSi 1.5 1.5 1.5   SPIN=- 3  !  collinear (scalar) spin\n%endblock positions_abs\nor\n%block positions_abs\nSi 1.5 1.5 1.5   SPIN=(-1.5 -1.5 1.5) !  noncollinear (vector) spin\n%endblock positions_abs\n\n(b) VCA mixture atoms\nExample:\n%block positions_abs\nSi 1.5 1.5 1.5 MIXTURE=(1 0.5)\n%endblock positions_abs\n\n(c) an identifying label\nExample:\n%block positions_abs\nSi 1.5 1.5 1.5  LABEL=Si33\n%endblock positions_abs\n\nDefault value: None, Default units: Angstroms.\n", "key_level": "basic", "value_type": "block"}, "spectral_xc_definition": {"key_type": "PARAM", "help_short": "spectral exchange-correlation functional", "help_full": "     SPECTRAL_XC_DEFINITION   *! spectral exchange-correlation functional!*\n\nType: Block                                                        Level: Basic\n\nThe functional to use when calculating the exchange-correlation potential during\na spectral calculation.\nThis version is a BLOCK keyword, with the flexibility to allow an arbitrary\nmixing of any of the basic SPECTRAL_XC_FUNCTIONAL components.\nBasic format: a series of separate lines, each containing <func> <weight>\nwhere <func> is the appropriate kernel for either eXchange or Correlation or both\nand <weight> is supposed to add to 1.0 for both eXchange and Correlation.\nModifiable: restart only\nDefault value : set by XC_FUNCTIONAL\n\n", "key_level": "basic", "value_type": "block"}, "ndown": {"key_type": "PARAM", "help_short": "number of down spins", "help_full": "                        NDOWN   *! number of down spins!*\n\nType: Real                                                         Level: Basic\n\nThe total number of down-spin electrons.  Can also be determined by CHARGE and SPIN.\nModifiable: never\nAllowed values: (any) >= 0.0\nDefault value : NELECTRONS/2\n\n", "key_level": "basic", "value_type": "real"}, "geom_frequency_est": {"key_type": "PARAM", "help_short": "estimated <frequency> at gamma point", "help_full": "         GEOM_FREQUENCY_EST   *! estimated <frequency> at gamma point!*\n\nType: Physical                                                     Level: Basic\n\nThe estimated average phonon frequency at the gamma point which will be used  to optimize the ionic relaxation where appropriate.\nA negative value indicates update estimated value after 1st step.\nModifiable: restart and on the fly\nAllowed values: (any) /= 0.0\nDefault value : 50 THz\n\n", "key_level": "basic", "value_type": "physical"}, "supercell_kpoint_mp_spacing": {"key_type": "CELL", "help_short": "Alias for SUPERCELL_KPOINTS_MP_SPACING", "help_full": "   SUPERCELL_KPOINT_MP_SPACING   *! Alias for SUPERCELL_KPOINTS_MP_SPACING !*\n\nType: Physical                                                     Level: Basic\n\nDefault value: Determined from SUPERCELL_KPOINTS_MP_SPACING\n", "key_level": "basic", "value_type": "physical"}, "phonon_kpoints_path": {"key_type": "CELL", "help_short": "Alias for PHONON_KPOINT_PATH", "help_full": "            PHONON_KPOINTS_PATH   *! Alias for PHONON_KPOINT_PATH !*\n\nType: Block                                                        Level: Basic\n\nDefault value: Determined from PHONON_KPOINT_PATH\n", "key_level": "basic", "value_type": "block"}, "fine_gmax": {"key_type": "PARAM", "help_short": "maximum |g| in fine grid", "help_full": "                    FINE_GMAX   *! maximum |g| in fine grid!*\n\nType: Physical                                                    Level: Expert\n\nDetermines the maximum mod(g-vector) such that all g-vectors less than this  are included in the fine grid. By default, the fine grid will be the same  as the standard grid. The fine grid is used to represent the charge density.\nModifiable: never\nAllowed values: (any) > 0.0\nDefault value : set by GRID_SCALE\n\n", "key_level": "expert", "value_type": "physical"}, "calculate_hirshfeld": {"key_type": "PARAM", "help_short": "Hirshfeld on/off", "help_full": "                   CALCULATE_HIRSHFELD   *! Hirshfeld on/off!*\n\nType: Boolean (Logical)                                            Level: Basic\n\nSpecifies whether or not to perform a Hirshfeld analysis of the charge density.\nModifiable: restart and on the fly\nAllowed values: TRUE or FALSE\nDefault value : FALSE\n\n", "key_level": "basic", "value_type": "boolean"}, "dipole_unit": {"key_type": "PARAM", "help_short": "unit of electric dipole in output", "help_full": "              DIPOLE_UNIT   *! unit of electric dipole in output!*\n\nType: String                                                Level: Intermediate\n\nControls the units used for all electric dipole moments in output - many  different units are supported.\nModifiable: restart and on the fly\nDefault value : DEBYE\n\n", "key_level": "intermediate", "value_type": "string"}, "magres_kpoint_list": {"key_type": "CELL", "help_short": "k-point list for magnetic resonance calculations", "help_full": "   MAGRES_KPOINT_LIST   *! k-point list for magnetic resonance calculations !*\n\nType: Block                                                        Level: Basic\n\nThe k-points and weights at which the magnetic resonance calculations will be performed.\nExample:\n%block magres_kpoint_list\n0.25  0.25  0.25  0.25\n0.25  0.25 -0.25  0.25\n0.25 -0.25  0.25  0.25\n0.25 -0.25 -0.25  0.25\n%endblock magres_kpoint_list\n\nDefault : the SCF k-point set.\n", "key_level": "basic", "value_type": "block"}, "supercell_kpoints_mp_spacing": {"key_type": "CELL", "help_short": "SCF Monkhorst-Pack grid density for FD phonon calculations", "help_full": " SUPERCELL_KPOINTS_MP_SPACING   *! SCF Monkhorst-Pack grid density for FD phonon\n\nType: Physical                                                     Level: Basic\n\nThe k-point density of a Monkhorst-Pack grid for a supercell FD phonon calculation.  Units of inverse length should be specified.\nExample:\nsupercell_kpoints_mp_spacing 0.05 1/ang\n\nDefault value: 0.1 1/ang.\n", "key_level": "basic", "value_type": "physical"}, "wannier_restart": {"key_type": "PARAM", "help_short": "Options for restart", "help_full": "                   WANNIER_RESTART   *! Options for restart !*\n\nType: String                                                       Level: Basic\n\nRequires that the Wannier function calculation should start from the results of a  previous calculation.\nModifiable: restart only\nAllowed values: INITIAL, FINAL, NONE, where:\nINITIAL: restart from before the spread minimisation.\nFINAL: restart from the end of the previous calculation\nNONE: do not restart from previous calculation.\nDefault value : NONE\n\n", "key_level": "basic", "value_type": "string"}, "spectral_nbands": {"key_type": "PARAM", "help_short": "number of bands/k-point in spectral calculation", "help_full": "     SPECTRAL_NBANDS   *! number of bands/k-point in spectral calculation!*\n\nType: Integer                                                      Level: Basic\n\nDetermines the number of bands per k-point in electronic spectroscopy calculation.\nModifiable: restart and on the fly\nAllowed values: (any integer) >= 0\nDefault value : NBANDS + (5*SQRT(NBANDS) or SPECTRAL_NEXTRA_BANDS or SPECTRAL_PERC_EXTRA_BANDS)\n\n", "key_level": "basic", "value_type": "integer"}, "phonon_max_cg_steps": {"key_type": "PARAM", "help_short": "max. number of cg steps in LR", "help_full": "            PHONON_MAX_CG_STEPS   *! max. number of cg steps in LR!*\n\nType: Integer                                               Level: Intermediate\n\nThe maximum number of conjugate gradient steps in PHONON calculation before  performing a SD reset.\nModifiable: restart and on the fly\nAllowed values: (any integer) >= 0\nDefault value : 0\n\n", "key_level": "intermediate", "value_type": "integer"}, "species_gamma": {"key_type": "CELL", "help_short": "Gyromagnetic radius for each species", "help_full": "           SPECIES_GAMMA   *! Gyromagnetic radius for each species !*\n\nType: Block                                                        Level: Basic\n\nThe gyromagnetic radius for each  atomic species\n", "key_level": "basic", "value_type": "block"}, "nspins": {"key_type": "PARAM", "help_short": "number of spin channels", "help_full": "                      NSPINS   *! number of spin channels!*\n\nType: Integer                                               Level: Intermediate\n\nThe number of spin channels - for a spin polarised calculation NSPINS=2,  for a non-spin polarised calculation NSPINS=1.\nModifiable: never\nAllowed values: 1 or 2\nDefault value : set by SPIN_POLARISED\n\n", "key_level": "intermediate", "value_type": "integer"}, "data_distribution": {"key_type": "PARAM", "help_short": "data distribution", "help_full": "                   DATA_DISTRIBUTION   *! data distribution!*\n\nType: String                                                Level: Intermediate\n\nControls the data distribution used.\nModifiable: restart only\nAllowed values: DEFAULT, KPOINT, GVECTOR, BAND, MIXED\nDefault value : DEFAULT\n\n", "key_level": "intermediate", "value_type": "string"}, "born_charge_sum_rule": {"key_type": "PARAM", "help_short": "enforce Born charge sum rule", "help_full": "            BORN_CHARGE_SUM_RULE   *! enforce Born charge sum rule !*\n\nType: Boolean (Logical)                                            Level: Basic\n\nSelects whether to explicitly correct the Born effective charge tensor to enforce the  sum rule that effective charges sum to zero.\nModifiable: restart and on the fly\nAllowed values: TRUE or FALSE\nDefault value : TRUE\n\n", "key_level": "basic", "value_type": "boolean"}, "md_nhc_length": {"key_type": "PARAM", "help_short": "Nose-Hoover chain length", "help_full": "                  MD_NHC_LENGTH   *! Nose-Hoover chain length!*\n\nType: Integer                                               Level: Intermediate\n\nA chain of Nose-Hoover thermostats of given length may be used to thermostat  an NVT run or two separate chains (ions and cell) may be used to thermostat  an NPT run.\nModifiable: never\nAllowed values: (any integer) >= 1\nDefault value : 5\n\n", "key_level": "intermediate", "value_type": "integer"}, "smearing_width": {"key_type": "PARAM", "help_short": "width of metal smearing", "help_full": "                  SMEARING_WIDTH   *! width of metal smearing!*\n\nType: Physical                                              Level: Intermediate\n\nDetermines the width of the Fermi-surface smearing if the system is not  FIX_OCCUPANCY.\nModifiable: restart and on the fly\nAllowed values: (any) > 0.0\nDefault value : 0.2 eV\n\n", "key_level": "intermediate", "value_type": "physical"}, "comment": {"key_type": "PARAM", "help_short": "comment string", "help_full": "                          COMMENT   *! comment string!*\n\nType: String                                                       Level: Basic\n\nA current_params%comment string that may be used to label the output.\nModifiable: restart and on the fly\nAllowed values: up to 80 characters\nDefault value : (empty)\n\n", "key_level": "basic", "value_type": "string"}, "continuation": {"key_type": "PARAM", "help_short": "continuation filename", "help_full": "                    CONTINUATION   *! continuation filename!*\n\nType: String                                                       Level: Basic\n\nThe name of file to read current_params%continuation data from, NULL if not a current_params%continuation run.\nNB A run cannot be both current_params%reuse and current_params%continuation.\nA current_params%continuation run restarts the current calculation from the end of the\nprevious one. As such, only a limited subset of all parameters may be\nchanged wrt the previous one.\nModifiable: restart only\nAllowed values: up to 255 character filename\nDefault value : NULL\n\n", "key_level": "basic", "value_type": "string"}, "bs_kpoint_mp_spacing": {"key_type": "CELL", "help_short": "Band structure Monkurst-Pack grid density", "help_full": "     BS_KPOINT_MP_SPACING   *! Band structure Monkurst-Pack grid density !*\n\nType: Physical                                                     Level: Basic\n\nThe k-point density of a Monkhorst-Pack grid used in a band structure calculation.  Units of inverse distance must be specified.\nExample:\nbs_kpoint_mp_spacing 0.05 1/ang\n\nDefault value: 0.1 1/ang.\n", "key_level": "basic", "value_type": "physical"}, "magres_kpoint_path": {"key_type": "CELL", "help_short": "Path of k-points at which magnetic resonance is calculated", "help_full": " MAGRES_KPOINT_PATH   *! Path of k-points at which magnetic resonance is calculat\n\nType: Block                                                        Level: Basic\n\nA path defining the k-points at which magnetic resonance calculations will be performed.\n", "key_level": "basic", "value_type": "block"}, "nlxc_div_corr_tol": {"key_type": "PARAM", "help_short": "convergence tolerance", "help_full": "                 NLXC_DIV_CORR_TOL   *! convergence tolerance !*\n\nType: Real                                                        Level: Expert\n\nTolerance within which the integral will be considered to have converged  when calculating the diverence correction.\nModifiable: restart only\nAllowed values: (any) > 0.0\nDefault value : 0.01\n\n", "key_level": "expert", "value_type": "real"}, "fft_max_prime_factor": {"key_type": "PARAM", "help_short": "largest prime factor in FFT", "help_full": "             FFT_MAX_PRIME_FACTOR   *! largest prime factor in FFT!*\n\nType: Integer                                                     Level: Expert\n\nSpecifies the largest prime factor to be used by the FFT algorithm when  determining the dimensions of the various grids. All FFT libraries supported  accept prime factors of 2,3 and 5. Some support more.\nFor maximum compatibility of check files between different systems you might want  to restrict FFT_MAX_PRIME_FACTOR=5 but for maximum efficiency you should use the  largest value supported by your FFT library.\nModifiable: never\nAllowed values: 2 <= (any prime) <= 19 depending on FFT library\nDefault value : set by FFT library\n\n", "key_level": "expert", "value_type": "integer"}, "md_elec_force_tol": {"key_type": "PARAM", "help_short": "max force per atom convergence tolerance", "help_full": "        MD_ELEC_FORCE_TOL   *! max force per atom convergence tolerance!*\n\nType: Physical                                                     Level: Basic\n\nTolerance for accepting convergence of the total energy due to change in max  force per atom during SCF cycle in an MD calculation. The difference between  max force on any atom over current_params%elec_convergence_win iterations must be less than this.\nModifiable: restart and on the fly\nAllowed values: (any) > 0.0\nDefault value : ELEC_FORCE_TOL\n\n", "key_level": "basic", "value_type": "physical"}, "thermo_t_spacing": {"key_type": "PARAM", "help_short": "Temperature spacing", "help_full": "                   THERMO_T_SPACING   *! Temperature spacing!*\n\nType: Physical                                                     Level: Basic\n\nThe spacing between temperature values for the thermodynamics calculation.\nModifiable: restart and on the fly\nAllowed values: (any) > (-epsilon)\nDefault value : THERMO_T_STOP - THERMO_T_START\n\n", "key_level": "basic", "value_type": "physical"}, "md_pathint_num_stages": {"key_type": "PARAM", "help_short": "PIMD number of stages", "help_full": "               MD_PATHINT_NUM_STAGES   *! PIMD number of stages!*\n\nType: Integer                                                      Level: Basic\n\nNumber of separate stages per particle in staging mode path integral MD -  must be a divisor of MD_NUM_BEADS.\nModifiable: restart and on the fly\nAllowed values: 1 <= (any integer) <= MD_NUM_BEADS\nDefault value : 1\n\n", "key_level": "basic", "value_type": "integer"}, "tssearch_method": {"key_type": "PARAM", "help_short": "TS search method", "help_full": "                    TSSEARCH_METHOD   *! TS search method !*\n\nType: String                                                       Level: Basic\n\nThe search method used to locate transition states.\nModifiable: restart only\nAllowed values: LSTQST,  NEB\nDefault value : LSTQST\n\n", "key_level": "basic", "value_type": "string"}, "geom_max_iter": {"key_type": "PARAM", "help_short": "maximum number of geometry optimization iterations", "help_full": "     GEOM_MAX_ITER   *! maximum number of geometry optimization iterations!*\n\nType: Integer                                                      Level: Basic\n\nDetermines the maximum number of geometry optimization iterations.\nModifiable: restart and on the fly\nAllowed values: (any integer) >= GEOM_CONVERGENCE_WIN\nDefault value : 30\n\n", "key_level": "basic", "value_type": "integer"}, "geom_energy_tol": {"key_type": "PARAM", "help_short": "geometry optimization energy convergence tolerance", "help_full": "    GEOM_ENERGY_TOL   *! geometry optimization energy convergence tolerance!*\n\nType: Physical                                                     Level: Basic\n\nTolerance for accepting convergence of the total energy during geometry  optimization. The difference between max and min energies over  current_params%geom_convergence_win iterations must be less than this.\nModifiable: restart and on the fly\nAllowed values: (any) > 0.0\nDefault value : 2*10^-5 eV\n\n", "key_level": "basic", "value_type": "physical"}, "phonon_fine_kpoint_mp_spacing": {"key_type": "CELL", "help_short": "The spacing of points on the fine MP set for phonons", "help_full": " PHONON_FINE_KPOINT_MP_SPACING   *! The spacing of points on the fine MP set for\n\nType: Physical                                                     Level: Basic\n\nThis specifies the miminum spacing bewteen points on a Monkhorst-Pack grid that phonons will be interpolated onto from the coarser phonon grid.\nExample:\nphonon_fine_kpoint_mp_spacing 0.05 1/ang\n\nDefault: same set as the DFPT phonon calculation.\n", "key_level": "basic", "value_type": "physical"}, "supercell_kpoints_list": {"key_type": "CELL", "help_short": "SCF k-points for FD phonon supercell", "help_full": "       SUPERCELL_KPOINTS_LIST   *! SCF k-points for FD phonon supercell!*\n\nType: Block                                                        Level: Basic\n\nA list of k-points in the brillouin zone (with associated weights)  used for BZ integration during a supercell FD phonon calculation.  The k-point weights must sum to 1.\nExample:\n%block supercell_kpoint_list\n0.25  0.25  0.25  0.25\n0.25  0.25 -0.25  0.25\n0.25 -0.25  0.25  0.25\n0.25 -0.25 -0.25  0.25\n%endblock supercel_kpoint_list\n\nDefault value: Generated from SUPERCELL_KPOINTS_MP_SPACING and the crystal symmetry.\n", "key_level": "basic", "value_type": "block"}, "write_orbitals": {"key_type": "PARAM", "help_short": "unformatted orbitals file on/off", "help_full": "             WRITE_ORBITALS   *! unformatted orbitals file on/off!*\n\nType: Boolean (Logical)                                            Level: Basic\n\nSpecifies whether or not to write an extra checkfile containing orbitals in a  band structure run.\nModifiable: restart and on the fly\nAllowed values: TRUE or FALSE\nDefault value : FALSE unless TASK=BANDSTRUCTURE\n\n", "key_level": "basic", "value_type": "boolean"}, "mixing_scheme": {"key_type": "PARAM", "help_short": "density mixing scheme", "help_full": "                   MIXING_SCHEME   *! density mixing scheme!*\n\nType: String                                                       Level: Basic\n\nDetermines the mixing scheme to be used in the density mixing procedure within  DM scheme.\nModifiable: restart only\nAllowed values: KERKER, LINEAR, BROYDEN, PULAY\nDefault value : BROYDEN\n\n", "key_level": "basic", "value_type": "string"}, "smearing_scheme": {"key_type": "PARAM", "help_short": "metal smearing scheme", "help_full": "                  SMEARING_SCHEME   *! metal smearing scheme!*\n\nType: String                                                Level: Intermediate\n\nDetermines the Fermi-surface smearing scheme to be used if the system is not  FIX_OCCUPANCY.\nModifiable: restart and on the fly\nAllowed values: GAUSSIAN, GAUSSIANSPLINES, FERMIDIRAC, HERMITEPOLYNOMIALS,  COLDSMEARING\nDefault value : GAUSSIAN\n\n", "key_level": "intermediate", "value_type": "string"}, "wannier_sd_step": {"key_type": "PARAM", "help_short": "Wannier steepest descent step length", "help_full": "          WANNIER_SD_STEP   *! Wannier steepest descent step length !*\n\nType: Real                                                         Level: Basic\n\nLength of steepest descent step length in Wannier function spread minimisation.\nModifiable: restart and on the fly\nAllowed values: (any) > 0.0\nDefault value : 1.0\n\n", "key_level": "basic", "value_type": "real"}, "phonon_calculate_dos": {"key_type": "PARAM", "help_short": "density of states calculation", "help_full": "           PHONON_CALCULATE_DOS   *! density of states calculation !*\n\nType: Boolean (Logical)                                            Level: Basic\n\nDetermines whether or not the phonon density of states will be calculated.\nModifiable: restart and on the fly\nAllowed values: TRUE or FALSE\nDefault value : FALSE\n\n", "key_level": "basic", "value_type": "boolean"}, "elnes_nbands": {"key_type": "PARAM", "help_short": "number of bands in elnes calculation", "help_full": "            ELNES_NBANDS   *! number of bands in elnes calculation!*\n\nType: Integer                                               Level: Intermediate\n\nDetermines the number of bands in an optical matrix elements calculation.\nModifiable: restart and on the fly\nAllowed values: (any integer) >= MAX(NUP,NDOWN)\nDefault value : NBANDS + (5*SQRT(NBANDS) or ELNES_NEXTRA_BANDS or ELNES_PERC_EXTRA_BANDS)\n\n", "key_level": "intermediate", "value_type": "integer"}, "md_hug_compression": {"key_type": "PARAM", "help_short": "Hugoniostat compression ratio", "help_full": "             MD_HUG_COMPRESSION   *! Hugoniostat compression ratio!*\n\nType: Real                                                         Level: Basic\n\nThe ratio of target volume:initial volume which specifies the state on the Hugoniot to simulate.\nModifiable: restart and on the fly\nAllowed values: 0.0 < (any) <= 1.0\nDefault value : 1.0\n\n", "key_level": "basic", "value_type": "real"}, "thermo_t_npoints": {"key_type": "PARAM", "help_short": "Number of points in temperature interval", "help_full": "        THERMO_T_NPOINTS   *! Number of points in temperature interval!*\n\nType: Integer                                               Level: Intermediate\n\nThe number of points in the temperature interval for the thermodynamics  calculation.\nModifiable: restart and on the fly\nAllowed values: (any integer) >= 1\nDefault value : 2 if THERMO_T_STOP /= THERMO_T_START or 1 otherwise\n\n", "key_level": "intermediate", "value_type": "integer"}, "elec_temp": {"key_type": "PARAM", "help_short": "electron temperatures", "help_full": "                     ELEC_TEMP   *! electron temperatures!*\n\nType: Physical                                              Level: Intermediate\n\nThe electron temperature in EDFT method.\nModifiable: restart only\nAllowed values: (any) >= 0.0\nDefault value : 0.0 k\n\n", "key_level": "intermediate", "value_type": "physical"}, "wannier_ion_cmoments": {"key_type": "PARAM", "help_short": "Compute ion multipole moments from Wannier functions", "help_full": " WANNIER_ION_CMOMENTS   *! Compute ion multipole moments from Wannier functions\n\nType: Boolean (Logical)                                     Level: Intermediate\n\nSelects whether or not to compute ion multipole moments from Wannier function  cumulant moments.\nModifiable: restart and on the fly\nAllowed values: TRUE or FALSE\nDefault value : FALSE\n\n", "key_level": "intermediate", "value_type": "boolean"}, "tssearch_force_tol": {"key_type": "PARAM", "help_short": "force convergence tolerance in QST search", "help_full": "       TSSEARCH_FORCE_TOL   *! force convergence tolerance in QST search!*\n\nType: Physical                                                     Level: Basic\n\nTolerance for accepting convergence of the maximum |ionic force| during  QST search.\nModifiable: restart and on the fly\nAllowed values: (any) > 0.0\nDefault value : 0.005 H/BOHR\n\n", "key_level": "basic", "value_type": "physical"}, "wannier_ion_rmax": {"key_type": "PARAM", "help_short": "Ion radius for Wannier function assignment", "help_full": "       WANNIER_ION_RMAX   *! Ion radius for Wannier function assignment !*\n\nType: Physical                                                     Level: Basic\n\nA Wannier function belongs to an ion if its Wf centre is within a distance  rmax from the ion centre.\nModifiable: restart and on the fly\nAllowed values: (any) > 0.0\nDefault value : 2.0 Bohr\n\n", "key_level": "basic", "value_type": "physical"}, "md_elec_eigenvalue_tol": {"key_type": "PARAM", "help_short": "MD eigenvalue convergence tolerance", "help_full": "        MD_ELEC_EIGENVALUE_TOL   *! MD eigenvalue convergence tolerance!*\n\nType: Physical                                              Level: Intermediate\n\nTolerance for accepting convergence of a single eigenvalue during DM/DIIS  minimization during SCF cycle in an MD calculation. The difference between  max and min energies over current_params%elec_convergence_win iterations must be less than this.\nModifiable: restart and on the fly\nAllowed values: (any) > 0.0\nDefault value : ELEC_EIGENVALUE_TOL\n\n", "key_level": "intermediate", "value_type": "physical"}, "supercell_kpoint_mp_grid": {"key_type": "CELL", "help_short": "Alias for SUPERCELL_KPOINTS_MP_GRID", "help_full": "      SUPERCELL_KPOINT_MP_GRID   *! Alias for SUPERCELL_KPOINTS_MP_GRID !*\n\nType: Integer Vector                                               Level: Basic\n\nDefault value: Determined from SUPERCELL_KPOINTS_MP_GRID\n", "key_level": "basic", "value_type": "integer"}, "ga_bulk_slice": {"key_type": "PARAM", "help_short": "GA bulk or surface slice", "help_full": "                  GA_BULK_SLICE   *! GA bulk or surface slice!*\n\nType: Boolean (Logical)                                            Level: Basic\n\nSpecifies whether or not to do a 3D or 2D slice in GA crossover.\nModifiable: never\nAllowed values: TRUE or FALSE\nDefault value : TRUE\n\n", "key_level": "basic", "value_type": "boolean"}, "bs_kpoints_path_spacing": {"key_type": "CELL", "help_short": "Alias for BS_KPOINT_PATH_SPACING", "help_full": "        BS_KPOINTS_PATH_SPACING   *! Alias for BS_KPOINT_PATH_SPACING !*\n\nType: Physical                                                     Level: Basic\n\nDefault value: Determined from BS_KPOINT_PATH_SPACING\n", "key_level": "basic", "value_type": "physical"}, "phonon_kpoint_path": {"key_type": "CELL", "help_short": "Phonon dispersion k-point path", "help_full": "            PHONON_KPOINT_PATH   *! Phonon dispersion k-point path !*\n\nType: Block                                                        Level: Basic\n\nThe path continuous through the BZ on which phonon dispersion is calculated.  This is specified in fractional coordinates.  Default value: None.\n", "key_level": "basic", "value_type": "block"}, "md_sample_iter": {"key_type": "PARAM", "help_short": "MD property sampling interval", "help_full": "               MD_SAMPLE_ITER   *! MD property sampling interval!*\n\nType: Integer                                                      Level: Basic\n\nAb initio properties will be sampled every MD_SAMPLE_ITER steps during  MD calculation if set >0.\nModifiable: restart and on the fly\nAllowed values: (any integer)\nDefault value : 0\n\n", "key_level": "basic", "value_type": "integer"}, "fix_occupancy": {"key_type": "PARAM", "help_short": "treat system as an insulator", "help_full": "                FIX_OCCUPANCY   *! treat system as an insulator!*\n\nType: Boolean (Logical)                                            Level: Basic\n\nDetermines if the system is treated as an insulator or a metal.\nModifiable: never\nAllowed values: TRUE or FALSE\nDefault value : FALSE\n\n", "key_level": "basic", "value_type": "boolean"}, "magres_max_sc_cycles": {"key_type": "PARAM", "help_short": "max. number of sc cycles in MAGRES", "help_full": "         MAGRES_MAX_SC_CYCLES   *! max. number of sc cycles in MAGRES!*\n\nType: Integer                                               Level: Intermediate\n\nThe maximum number of self consistent cycles in MAGRES calculation.\nModifiable: restart and on the fly\nAllowed values: (any integer) >= 1\nDefault value : 20\n\n", "key_level": "intermediate", "value_type": "integer"}, "mix_spin_gmax": {"key_type": "PARAM", "help_short": "maximum G-vector in spin mixing scheme", "help_full": "           MIX_SPIN_GMAX   *! maximum G-vector in spin mixing scheme!*\n\nType: Physical                                                    Level: Expert\n\nDetermines the maximum G-vector component of spin density to mix within DM scheme.\nModifiable: restart only\nAllowed values: (any) > 0.0\nDefault value : 1.5 /ANG\n\n", "key_level": "expert", "value_type": "physical"}, "bs_kpoints_mp_spacing": {"key_type": "CELL", "help_short": "Alias for BS_KPOINT_MP_SPACING", "help_full": "          BS_KPOINTS_MP_SPACING   *! Alias for BS_KPOINT_MP_SPACING !*\n\nType: Physical                                                     Level: Basic\n\nDefault value: Determined from BS_KPOINT_MP_SPACING\n", "key_level": "basic", "value_type": "physical"}, "md_num_beads": {"key_type": "PARAM", "help_short": "PIMD number of beads", "help_full": "                    MD_NUM_BEADS   *! PIMD number of beads!*\n\nType: Integer                                                      Level: Basic\n\nNumber of beads in path integral MD - must be equal to NUM_FARMS if using  farm parallelism.\nModifiable: restart only\nAllowed values: (any integer) > 0\nDefault value : if NUM_FARMS=1 then set by MD_TEMPERATURE\n\n", "key_level": "basic", "value_type": "integer"}, "kpoint_mp_spacing": {"key_type": "CELL", "help_short": "Alias for KPOINTS_MP_SPACING", "help_full": "             KPOINT_MP_SPACING   *! Alias for KPOINTS_MP_SPACING !*\n\nType: Physical                                                     Level: Basic\n\nDefault value: Determined from KPOINTS_MP_SPACING\n", "key_level": "basic", "value_type": "physical"}, "xc_vxc_deriv_epsilon": {"key_type": "PARAM", "help_short": "OBSOLETE", "help_full": "                      XC_VXC_DERIV_EPSILON   *! OBSOLETE!*\n\nType: Real                                                        Level: Expert\n\nOBSOLETE: This keyword was once used in linear response with GGA  but a new algorithm is now used and this is redundant.\n\n", "key_level": "expert", "value_type": "real"}, "tssearch_qst_max_iter": {"key_type": "PARAM", "help_short": "max iters in QST search", "help_full": "              TSSEARCH_QST_MAX_ITER   *! max iters in QST search!*\n\nType: Integer                                               Level: Intermediate\n\nThe maximum number of QST iterations during an LST/QST search.\nModifiable: restart and on the fly\nAllowed values: (any integer) > 0\nDefault value : 5\n\n", "key_level": "intermediate", "value_type": "integer"}, "elec_energy_tol": {"key_type": "PARAM", "help_short": "total energy per atom convergence tolerance", "help_full": "       ELEC_ENERGY_TOL   *! total energy per atom convergence tolerance!*\n\nType: Physical                                                     Level: Basic\n\nTolerance for accepting convergence of the total energy per atom.\nThe difference between max and min energies over current_params%elec_convergence_win  iterations must be less than this.\nModifiable: restart and on the fly\nAllowed values: (any) > 0.0\nDefault value : 10^-5 eV/atom\n\n", "key_level": "basic", "value_type": "physical"}, "md_hug_t": {"key_type": "PARAM", "help_short": "Hugoniostat coupling constant", "help_full": "                  MD_HUG_T   *! Hugoniostat coupling constant!*\n\nType: Physical                                                     Level: Basic\n\nSpecify characteristic coupling constant for Hugoniostat. Usually written as frequency in most derivations.\nModifiable: restart and on the fly\nAllowed values: (any) > MD_DELTA_T\nDefault value : MD_ION_T\n\n", "key_level": "basic", "value_type": "physical"}, "calculate_densdiff": {"key_type": "PARAM", "help_short": "calculate density difference based on atoms", "help_full": "     CALCULATE_DENSDIFF   *! calculate density difference based on atoms !*\n\nType: Boolean (Logical)                                     Level: Intermediate\n\nSpecifies whether or not to generate charge density difference based   on the linear combination of atomic densities.\nModifiable: restart and on the fly\nAllowed values: TRUE or FALSE\nDefault value : FALSE\n\n", "key_level": "intermediate", "value_type": "boolean"}, "tddft_method": {"key_type": "PARAM", "help_short": "Method used to approach TDDFT", "help_full": "                TDDFT_METHOD   *! Method used to approach TDDFT!*\n\nType: String                                                       Level: Basic\n\nThe method by which to approach TDDFT.\nModifiable: restart and on the fly\nAllowed values: HUTTER, LANCZOS_CHAIN, DYSON\nDefault value : HUTTER\n\n", "key_level": "basic", "value_type": "string"}, "md_elec_convergence_win": {"key_type": "PARAM", "help_short": "MD convergence tolerance window", "help_full": "         MD_ELEC_CONVERGENCE_WIN   *! MD convergence tolerance window!*\n\nType: Integer                                               Level: Intermediate\n\nThe electronic convergence criteria must be met for MD_ELEC_CONVERGENCE_WIN  iterations before acceptance during SCF cycle in an MD calculation.\nModifiable: restart and on the fly\nAllowed values: (any integer) >= 2\nDefault value : ELEC_CONVERGENCE_WIN\n\n", "key_level": "intermediate", "value_type": "integer"}, "positions_frac_intermediate": {"key_type": "CELL", "help_short": "Transition state search intermediate state", "help_full": " POSITIONS_FRAC_INTERMEDIATE   *! Transition state search intermediate state !*\n\nType: Block                                                        Level: Basic\n\nThe positions of the atoms, in fractional coordinates,  for the intermediate transition state product.  Default value: The initial atomic positions.\n", "key_level": "basic", "value_type": "block"}, "md_damping_reset": {"key_type": "PARAM", "help_short": "damped molecular dynamics reset frequency", "help_full": "        MD_DAMPING_RESET   *! damped molecular dynamics reset frequency!*\n\nType: Integer                                               Level: Intermediate\n\nThis specifies the number of molecular dynamics steps between recalculating  the damping parameters. A value of 0 means never recalculate.\nModifiable: restart and on the fly\nAllowed values: (any integer) >= 0\nDefault value : 30\n\n", "key_level": "intermediate", "value_type": "integer"}, "optics_xc_functional": {"key_type": "PARAM", "help_short": "optics exchange-correlation functional", "help_full": "       OPTICS_XC_FUNCTIONAL   *! optics exchange-correlation functional!*\n\nType: String                                                       Level: Basic\n\nThe functional to use when calculating the exchange-correlation potential during an optics calculation.\nModifiable: restart only\nAllowed values: LDA, PW91, PBE, PBESOL, RPBE, WC, BLYP, ZERO, WDA.\nIn addition, we now support libXC and all the non-hybrid functionals therein.\nDefault value : set by XC_FUNCTIONAL\n\n", "key_level": "basic", "value_type": "string"}, "phonon_kpoint_mp_offset": {"key_type": "CELL", "help_short": "Phonon wavevector Monkhorst Pack grid offset", "help_full": "  PHONON_KPOINT_MP_OFFSET   *! Phonon wavevector Monkhorst Pack grid offset !*\n\nType: Real Vector                                                  Level: Basic\n\nThe offset of the origin of the Monkhorst-Pack set for phonons in fractional coordinates  Default value: (0, 0, 0).\n", "key_level": "basic", "value_type": "real"}, "nlxc_exchange_fraction": {"key_type": "PARAM", "help_short": "OBSOLETE", "help_full": "                     NLXC_EXCHANGE_FRACTION   *! OBSOLETE !*\n\nType: Real                                                        Level: Expert\n\nNB This keyword has been removed.\n\n", "key_level": "expert", "value_type": "real"}, "calc_full_ex_pot": {"key_type": "PARAM", "help_short": "OBSOLETE", "help_full": "                        CALC_FULL_EX_POT   *! OBSOLETE !*\n\nType: Boolean (Logical)                                     Level: Intermediate\n\nNB This is an OBSOLETE form - please use NLXC_CALC_FULL_EX_POT instead.\n\n", "key_level": "intermediate", "value_type": "boolean"}, "md_num_iter": {"key_type": "PARAM", "help_short": "number of MD steps", "help_full": "                      MD_NUM_ITER   *! number of MD steps!*\n\nType: Integer                                                      Level: Basic\n\nThe number of molecular dynamics steps to perform.\nModifiable: restart and on the fly\nAllowed values: (any integer) > 0\nDefault value : 100\n\n", "key_level": "basic", "value_type": "integer"}, "phonon_sum_rule_method": {"key_type": "PARAM", "help_short": "select method to enforce phonon sum rule", "help_full": "     PHONON_SUM_RULE_METHOD   *! select method to enforce phonon sum rule !*\n\nType: String                                                Level: Intermediate\n\nSelects a method to use when enforcing acoustic phonon sum rule.\nModifiable: restart and on the fly\nAllowed values:\nNONE       : No sum-rule correction will be applied.\nRECIPROCAL : Correct dynamical matrix D(q) at each q using D(q=0).\nREALSPACE : Correct the real-space force constant matrix C(R).\nREAL-RECIP : Correct C(R) in realspace followed by D(q) in reciprocal space.\nMOLECULAR : Correct D(0) using rotational as well as translational sum-rule.\nMOLECULAR-1D : Correct D(0) for a linear molecule using rotational as well as translational sum-rule.\nDefault value : RECIPROCAL\n\n", "key_level": "intermediate", "value_type": "string"}, "wannier_max_sd_steps": {"key_type": "PARAM", "help_short": "max. number of sd steps in WANNIER", "help_full": "         WANNIER_MAX_SD_STEPS   *! max. number of sd steps in WANNIER !*\n\nType: Integer                                               Level: Intermediate\n\nThe maximum number of steepest descent steps in the Wannier function calculation.\nModifiable: restart and on the fly\nAllowed values: (any integer) > 0\nDefault value : 10000\n\n", "key_level": "intermediate", "value_type": "integer"}, "spectral_nextra_bands": {"key_type": "PARAM", "help_short": "number of extra spectral bands", "help_full": "           SPECTRAL_NEXTRA_BANDS   *! number of extra spectral bands!*\n\nType: Integer                                               Level: Intermediate\n\nThe number of extra bands in an electronic spectroscopy calculation above NBANDS.\nModifiable: restart and on the fly\nAllowed values: (any integer) >= 0\nDefault value : 0\n\n", "key_level": "intermediate", "value_type": "integer"}, "spectral_kpoint_path_spacing": {"key_type": "CELL", "help_short": "Spectral properties k-point path spacing", "help_full": "  SPECTRAL_KPOINT_PATH_SPACING   *! Spectral properties k-point path spacing !*\n\nType: Physical                                                     Level: Basic\n\nThe maximum spacing between mycell%kpoints along the path specified by SPECTRAL_KPOINT_PATH.  Units of inverse length must be specified.  Default value: 0.1 1/ang\n", "key_level": "basic", "value_type": "physical"}, "phonon_fine_cutoff_method": {"key_type": "PARAM", "help_short": "non-periodic force extraction", "help_full": "         PHONON_FINE_CUTOFF_METHOD   *! non-periodic force extraction !*\n\nType: String                                                      Level: Expert\n\nSelects which method to use to extract non-periodic force constant matrix from periodic supercell.\nWith the CUMULANT method, all contributions from the periodic supercell are summed with a suitable  weighting factor to avoid double counting of image contributions.\nThe SPHERICAL method, uses a minimum image convention with a spherical cutoff  given by PHONON_FORCE_CONSTANT_CUTOFF.\nModifiable: restart and on the fly\nAllowed values: CUMULANT and SPHERICAL\nDefault value : CUMULANT\n\n", "key_level": "expert", "value_type": "string"}, "optics_kpoints_mp_offset": {"key_type": "CELL", "help_short": "Optics Monkhorst-Pack grid offset", "help_full": "       OPTICS_KPOINTS_MP_OFFSET   *! Optics Monkhorst-Pack grid offset !*\n\nType: Real Vector                                                  Level: Basic\n\nThe offset of the origin of the Monkhorst-Pack set when calculating optical properties.  This is specified in fractional coordinates.  Default value: (0, 0, 0)\n", "key_level": "basic", "value_type": "real"}, "elnes_kpoint_list": {"key_type": "CELL", "help_short": "k-point list for ELNES (core level spectroscopy) calculations", "help_full": " ELNES_KPOINT_LIST   *! k-point list for ELNES (core level spectroscopy) calculat\n\nType: Block                                                        Level: Basic\n\nThe k-points and weights at which ELNES (core level spectroscopy) calculations will be performed.\nExample:\n%block elnes_kpoint_list\n0.25  0.25  0.25  0.25\n0.25  0.25 -0.25  0.25\n0.25 -0.25  0.25  0.25\n0.25 -0.25 -0.25  0.25\n%endblock elnes_kpoint_list\n\nDefault: the SCF k-point set.\n", "key_level": "basic", "value_type": "block"}, "sedc_d_jchs": {"key_type": "PARAM", "help_short": "d value for JCHS semi-empirical dispersion/vdW correction scheme", "help_full": " SEDC_D_JCHS   *! d value for JCHS semi-empirical dispersion/vdW correction schem\n\nType: Real                                                        Level: Expert\n\nCustomisable d value for the damping function in the JCHS  semi-empirical dispersion/van der Waals correction scheme.\nModifiable: restart and on the fly\nDefault is determined by XC_FUNCTIONAL.\n\n", "key_level": "expert", "value_type": "real"}, "phonon_gamma_directions": {"key_type": "CELL", "help_short": "Phonon gamma-point LO/TO splitting", "help_full": "       PHONON_GAMMA_DIRECTIONS   *! Phonon gamma-point LO/TO splitting !*\n\nType: Block                                                        Level: Basic\n\nThis is a list of directions along which q->0 will be calculated for the  non-analytic LO/TO term in a phonon calculation at q=0.  Fractional coordinates must be used.  Default value: The k-point before gamma in the k-point list, or the one after or (0.1, 0, 0)\n", "key_level": "basic", "value_type": "block"}, "ga_pop_size": {"key_type": "PARAM", "help_short": "GA population size", "help_full": "                      GA_POP_SIZE   *! GA population size!*\n\nType: Integer                                                      Level: Basic\n\nNumber of distinct configurations in the GA population.\nModifiable: never\nAllowed values: (any even integer) >=2\nDefault value : NUM_ATOMS if even or NUM_ATOMS+1 otherwise\n\n", "key_level": "basic", "value_type": "integer"}, "phonon_fine_kpoint_mp_grid": {"key_type": "CELL", "help_short": "Fine MP-grid of phonon wavevectors", "help_full": "      PHONON_FINE_KPOINT_MP_GRID   *! Fine MP-grid of phonon wavevectors !*\n\nType: Integer Vector                                               Level: Basic\n\nPhonon frequencies are calculated on a coarse set of wavevectors using DFPT and interpolated onto this finer grid of wavevectors.\n", "key_level": "basic", "value_type": "integer"}, "task": {"key_type": "PARAM", "help_short": "type of calculation", "help_full": "                         TASK   *! type of calculation!*\n\nType: String                                                       Level: Basic\n\nDefines the type of calculation to be performed.\nModifiable: restart only\nAllowed values: SINGLEPOINT, BANDSTRUCTURE, GEOMETRYOPTIMIZATION,  MOLECULARDYNAMICS, OPTICS, TRANSITIONSTATESEARCH, PHONON, EFIELD,  PHONON+EFIELD, THERMODYNAMICS, WANNIER, MAGRES, ELNES, SPECTRAL, GENETICALGOR\nDefault value : SINGLEPOINT\n\n", "key_level": "basic", "value_type": "string"}, "geom_spin_fix": {"key_type": "PARAM", "help_short": "number of fixed spin geometry optimization iterations", "help_full": "   GEOM_SPIN_FIX   *! number of fixed spin geometry optimization iterations!*\n\nType: Integer                                               Level: Intermediate\n\nIf not a FIX_OCCUPANCY calculation, then the total spin is allowed to vary  after GEOM_SPIN_FIX steps of the geometry optimization algorithm, or is held  constant at the value found at the end of the first configuration if  GEOM_SPIN_FIX<0.\nModifiable: restart and on the fly\nAllowed values: (any integer)\nDefault value : 0\n\n", "key_level": "intermediate", "value_type": "integer"}, "phonon_method": {"key_type": "PARAM", "help_short": "phonon calculation method", "help_full": "                 PHONON_METHOD   *! phonon calculation method !*\n\nType: String                                                       Level: Basic\n\nSelects which calculation method to use for phonons.\nModifiable: restart only\nAllowed values: DFPT, LINEARRESPONSE, FINITEDISPLACEMENT\nDefault value : set by PHONON_FINE_METHOD\n\n", "key_level": "basic", "value_type": "string"}, "wannier_min_algor": {"key_type": "PARAM", "help_short": "Spread minimisation algorithm", "help_full": "             WANNIER_MIN_ALGOR   *! Spread minimisation algorithm !*\n\nType: String                                                       Level: Basic\n\nSpread minimisation algorithm: steepest descent or orbital rotations.\nModifiable: restart only\nAllowed values: SD, OR\nDefault value : OR\n\n", "key_level": "basic", "value_type": "string"}, "devel_code": {"key_type": "PARAM", "help_short": "developers code", "help_full": "                        DEVEL_CODE   *! developers code!*\n\nType: Block                                                       Level: Expert\n\nPrivate string for developers only - a way to access test functionality at runtime.\nModifiable: restart and on the fly\nAllowed values: (any)\nDefault value : <empty>\n\n", "key_level": "expert", "value_type": "block"}, "positions_abs_product": {"key_type": "CELL", "help_short": "Transiation state search product", "help_full": "         POSITIONS_ABS_PRODUCT   *! Transiation state search product !*\n\nType: Block                                                        Level: Basic\n\nThe species and positions of the atoms, in absolute coordinates,  for the transition state product.  Optionally, units of length may be specified.  Default value: The initial atomic positions.\n", "key_level": "basic", "value_type": "block"}, "bs_xc_functional": {"key_type": "PARAM", "help_short": "BS exchange-correlation functional", "help_full": "           BS_XC_FUNCTIONAL   *! BS exchange-correlation functional!*\n\nType: String                                                       Level: Basic\n\nThe functional to use when calculating the exchange-correlation potential during  a bandstructure calculation.\nModifiable: restart only\nAllowed values: LDA, PW91, PBE, PBESOL, RPBE, WC, BLYP, LDA-C, LDA-X, ZERO,  HF, PBE0, B3LYP, HSE03, HSE06, EXX-X, HF-LDA, EXX, EXX-LDA,  SHF, SX, SHF-LDA, SX-LDA, WDA, SEX, SEX-LDA.\nIn addition, we now support libXC and all the additional functionals therein.\nDefault value : set by XC_FUNCTIONAL\n\n", "key_level": "basic", "value_type": "string"}, "reuse": {"key_type": "PARAM", "help_short": "reuse filename", "help_full": "                           REUSE   *! reuse filename!*\n\nType: String                                                       Level: Basic\n\nThe name of file to read current_params%reuse data from, NULL if not a current_params%reuse run.\nNB A run cannot be both current_params%reuse and current_params%continuation.\nA current_params%reuse run is essentially a new calculation that tries to current_params%reuse as      much as possible from an earlier calculation.\nModifiable: restart only\nAllowed values: up to 255 character filename\nDefault value : NULL\n\n", "key_level": "basic", "value_type": "string"}, "wannier_spread_type": {"key_type": "PARAM", "help_short": "Spread functional definition", "help_full": "            WANNIER_SPREAD_TYPE   *! Spread functional definition !*\n\nType: String                                                       Level: Basic\n\nSelects definition for Wannier function spread functional.\nModifiable: restart only\nAllowed values: VANDERBILT, RESTA\nDefault value : VANDERBILT\n\n", "key_level": "basic", "value_type": "string"}, "mix_spin_amp": {"key_type": "PARAM", "help_short": "spin density mixing amplitude", "help_full": "                MIX_SPIN_AMP   *! spin density mixing amplitude!*\n\nType: Real                                                  Level: Intermediate\n\nDetermines the mixing amplitude of the charge density within DM scheme.\nModifiable: restart only\nAllowed values: (any) > 0.0\nDefault value : 2.0\n\n", "key_level": "intermediate", "value_type": "real"}, "calculate_raman": {"key_type": "PARAM", "help_short": "calculate Raman intensities", "help_full": "               CALCULATE_RAMAN   *! calculate Raman intensities !*\n\nType: Boolean (Logical)                                            Level: Basic\n\nSelects whether to compute Raman intensities as part of a phonon  or efield linear-response calculation.\nModifiable: restart and on the fly\nAllowed values: TRUE or FALSE\nDefault value : FALSE\n\n", "key_level": "basic", "value_type": "boolean"}, "mix_history_length": {"key_type": "PARAM", "help_short": "number of densities in mixing scheme", "help_full": "         MIX_HISTORY_LENGTH   *! number of densities in mixing scheme!*\n\nType: Integer                                               Level: Intermediate\n\nDetermines the maximum number of charge/spin densities to be kept in the mixing  history within DM scheme.\nModifiable: restart only\nAllowed values: (any integer) > 0\nDefault value : 7\n\n", "key_level": "intermediate", "value_type": "integer"}, "spin_polarised": {"key_type": "PARAM", "help_short": "spin polarised", "help_full": "                      SPIN_POLARISED   *! spin polarised!*\n\nType: Boolean (Logical)                                            Level: Basic\n\nTurns on/off spin polarisation (English spelling).\nModifiable: never\nAllowed values: TRUE or FALSE\nDefault value : FALSE unless SPIN>0\n\n", "key_level": "basic", "value_type": "boolean"}, "sedc_n_obs": {"key_type": "PARAM", "help_short": "n value for OBS semi-empirical dispersion/vdW correction scheme", "help_full": " SEDC_N_OBS   *! n value for OBS semi-empirical dispersion/vdW correction scheme\n\nType: Real                                                        Level: Expert\n\nCustomisable n value for the damping function in the OBS  semi-empirical dispersion/van der Waals correction scheme.\nModifiable: restart and on the fly\nDefault is determined by XC_FUNCTIONAL.\n\n", "key_level": "expert", "value_type": "real"}, "num_dump_cycles": {"key_type": "PARAM", "help_short": "frequency of wavefunction dumps", "help_full": "             NUM_DUMP_CYCLES   *! frequency of wavefunction dumps!*\n\nType: Integer                                                      Level: Basic\n\nNumber of SCF cycles between wavefunction dumps.\nIf <=0 then no dumps will be written.\nModifiable: restart and on the fly\nAllowed values: (any integer)\nDefault value : 0\n\n", "key_level": "basic", "value_type": "integer"}, "ga_max_gens": {"key_type": "PARAM", "help_short": "GA max. number of generations", "help_full": "                GA_MAX_GENS   *! GA max. number of generations!*\n\nType: Integer                                                      Level: Basic\n\nMaximum number of generations to evolve population for regardless of convergence.\nModifiable: restart and on the fly\nAllowed values: (any integer) > 0\nDefault value : 3*NUM_ATOMS\n\n", "key_level": "basic", "value_type": "integer"}, "phonon_kpoints_path_spacing": {"key_type": "CELL", "help_short": "Alias for PHONON_KPOINT_PATH_SPACING", "help_full": "    PHONON_KPOINTS_PATH_SPACING   *! Alias for PHONON_KPOINT_PATH_SPACING !*\n\nType: Physical                                                     Level: Basic\n\nDefault value: Determined from PHONON_KPOINT_PATH_SPACING\n", "key_level": "basic", "value_type": "physical"}, "popn_bond_cutoff": {"key_type": "PARAM", "help_short": "population analysis bond cutoff", "help_full": "             POPN_BOND_CUTOFF   *! population analysis bond cutoff!*\n\nType: Physical                                                     Level: Basic\n\nDetermines the maximum length of a bond for a population analysis calculation.\nModifiable: restart and on the fly\nAllowed values: (any) > 0.0\nDefault value : 3.0 ANG\n\n", "key_level": "basic", "value_type": "physical"}, "raman_range_low": {"key_type": "PARAM", "help_short": "start frequency for Raman", "help_full": "                RAMAN_RANGE_LOW   *! start frequency for Raman !*\n\nType: Physical                                                     Level: Basic\n\nLower limit of a frequency window for which Raman intensities will be calculated.\nModifiable: restart and on the fly\nAllowed values: (any) > 0.0\nDefault value : 0.0 eV\n\n", "key_level": "basic", "value_type": "physical"}, "cut_off_energy": {"key_type": "PARAM", "help_short": "maximum energy of planewaves in basis set", "help_full": "         CUT_OFF_ENERGY   *! maximum energy of planewaves in basis set!*\n\nType: Physical                                              Level: Intermediate\n\nDetermines the cut-off energy for the plane wave basis set used.\nWill override the BASIS_PRECISION value if also defined.\nModifiable: never\nAllowed values: (any) > 0.0\nDefault value : set by BASIS_PRECISION=FINE\n\n", "key_level": "intermediate", "value_type": "physical"}, "supercell_kpoint_list": {"key_type": "CELL", "help_short": "Alias for SUPERCELL_KPOINTS_LIST", "help_full": "         SUPERCELL_KPOINT_LIST   *! Alias for SUPERCELL_KPOINTS_LIST !*\n\nType: Block                                                        Level: Basic\n\nDefault value: Determined from SUPERCELL_KPOINTS_LIST\n", "key_level": "basic", "value_type": "block"}, "md_use_plumed": {"key_type": "PARAM", "help_short": "Use PLUMED metadynamics", "help_full": "                  MD_USE_PLUMED   *! Use PLUMED metadynamics!*\n\nType: Boolean (Logical)                                            Level: Basic\n\nSpecifies whether or not to perform metadynamics using the PLUMED framework.\nTo use this option you must compile and link against the PLUMED source,\nwhich you can find online at http://merlino.mi.infn.it/~plumed/PLUMED/Home.html\nModifiable: restart and on the fly\nAllowed values: TRUE or FALSE\nDefault value : FALSE\n\n", "key_level": "basic", "value_type": "boolean"}, "tddft_selected_state": {"key_type": "PARAM", "help_short": "TDDFT state to use in geometry/MD", "help_full": "          TDDFT_SELECTED_STATE   *! TDDFT state to use in geometry/MD!*\n\nType: Integer                                                      Level: Basic\n\nThe selected excited state for use during geometry optimisation or molecular dynamics.\nModifiable: restart only\nAllowed values: (any integer) >= 0\nDefault value : 0\n\n", "key_level": "basic", "value_type": "integer"}, "num_proc_in_smp": {"key_type": "PARAM", "help_short": "number of processors in SMP node", "help_full": "            NUM_PROC_IN_SMP   *! number of processors in SMP node !*\n\nType: Integer                                               Level: Intermediate\n\nSpecifies the maximum number of active processors per node in an SMP-aware  calculation.\nModifiable: restart only\nAllowed values: (any integer) > 0\nDefault value : 1\n\n", "key_level": "intermediate", "value_type": "integer"}, "nlxc_impose_trs": {"key_type": "PARAM", "help_short": "impose time reversal symmetry", "help_full": "              NLXC_IMPOSE_TRS   *! impose time reversal symmetry !*\n\nType: Boolean (Logical)                                     Level: Intermediate\n\nSpecifies whether or not to impose time reversal symmetry on the Gamma point.\nSee also NLXC_EXCHANGE_REFLECT_KPTS.\nModifiable: restart only\nAllowed values: TRUE or FALSE\nDefault value : FALSE\n\n", "key_level": "intermediate", "value_type": "boolean"}, "symmetry_ops": {"key_type": "CELL", "help_short": "Crystal symmetry operations", "help_full": "                SYMMETRY_OPS   *! Crystal symmetry operations !*\n\nType: Block                                                       Level: Expert\n\nThe symmetry operations (rotation/translations) applied to the cell.  These must be consistent with the crystal symmetry  Example:\n%block symmetry_ops\n1.0  0.0  0.0 ! 3x3 rotation matrix\n0.0  1.0  0.0\n0.0  0.0  1.0\n0.0  0.0  0.0  ! Translation vector\n1.0  0.0  0.0 ! 3x3 rotation matrix\n0.0 -1.0  0.0\n0.0  0.0  1.0\n0.0  0.0  0.0  ! Translation vector\n%endblock symmetry_ops\n\nDefault value: None, unless GENERATE_SYMMETRY is specified.\n", "key_level": "expert", "value_type": "block"}, "basis_precision": {"key_type": "PARAM", "help_short": "accuracy of basis set", "help_full": "                  BASIS_PRECISION   *! accuracy of basis set!*\n\nType: String                                                       Level: Basic\n\nControls the precision of the basis set by choosing the level of convergence  of atomic energies with this basis set and pseudopotential.  Will be used to  determine the value of CUT_OFF_ENERGY if not independently specified.\nModifiable: never\nAllowed values: NULL, COARSE, MEDIUM, FINE, PRECISE, EXTREME\nDefault value : FINE\n\n", "key_level": "basic", "value_type": "string"}, "sedc_s6_g06": {"key_type": "PARAM", "help_short": "S6 value for G06 semi-empirical dispersion/vdW correction scheme", "help_full": " SEDC_S6_G06   *! S6 value for G06 semi-empirical dispersion/vdW correction schem\n\nType: Real                                                        Level: Expert\n\nCustomisable S6 value for the damping function in the G06  semi-empirical dispersion/van der Waals correction scheme.\nModifiable: restart and on the fly\nDefault is determined by XC_FUNCTIONAL.\n\n", "key_level": "expert", "value_type": "real"}, "ionic_constraints": {"key_type": "CELL", "help_short": "Constrains on ionic position", "help_full": "             IONIC_CONSTRAINTS   *! Constrains on ionic position !*\n\nType: Block                                                        Level: Basic\n\nA list of the constraints on the motion of the ions  during relaxation or molecular dynamics  Default value: None, unless FIX_COM is specified.\n", "key_level": "basic", "value_type": "block"}, "pspot_beta_phi_type": {"key_type": "PARAM", "help_short": "<beta|phi> representation", "help_full": "              PSPOT_BETA_PHI_TYPE   *! <beta|phi> representation!*\n\nType: String                                                      Level: Expert\n\nDetermines the representation of the <beta|phi> projectors.\nModifiable: never\nAllowed values: REAL or RECIPROCAL\nDefault value : set to PSPOT_NONLOCAL_TYPE\n\n", "key_level": "expert", "value_type": "string"}, "positions_noise": {"key_type": "CELL", "help_short": "Noise added onto atomic positions", "help_full": "            POSITIONS_NOISE   *! Noise added onto atomic positions !*\n\nType: Physical                                                     Level: Basic\n\nThe maximum amount of random noise that will be added onto all of the  atomic positions in the unit cell. It is symmetry and constraints conserving.\nExample:\npositions_noise 0.1 Ang ! Add noise of up to 0.1A to all atomic positions\nDefault value: 0.0 Angstroms\n", "key_level": "basic", "value_type": "physical"}, "cell_noise": {"key_type": "CELL", "help_short": "Noise added onto unit cell parameters", "help_full": "            CELL_NOISE   *! Noise added onto unit cell parameters !*\n\nType: Physical                                                     Level: Basic\n\nThe maximum amount of random noise that will be added onto all of the  unit cell parameters. It is symmetry and constraints conserving.\nExample:\ncell_noise 0.1 Ang ! Add noise of up to 0.1A to cell vectors\nDefault value: 0.0 Angstroms\n", "key_level": "basic", "value_type": "physical"}, "efield_max_cycles": {"key_type": "PARAM", "help_short": "maximum cycles in EFIELD", "help_full": "                EFIELD_MAX_CYCLES   *! maximum cycles in EFIELD!*\n\nType: Integer                                               Level: Intermediate\n\nThe maximum number of SCF cycles in EFIELD calculation regardless of convergence.  Modifiable: restart and on the fly\nAllowed values: (any integer) > 0\nDefault value : 50\n\n", "key_level": "intermediate", "value_type": "integer"}, "fix_all_cell": {"key_type": "CELL", "help_short": "Fix all lattice parameters", "help_full": "                 FIX_ALL_CELL   *! Fix all lattice parameters !*\n\nType: Boolean (Logical)                                            Level: Basic\n\nIf present, all lattice parameters will remain fixed during a geometry optimisation or MD run.  Default value: False.\n", "key_level": "basic", "value_type": "boolean"}, "dipole_dir": {"key_type": "PARAM", "help_short": "periodic dipole direction", "help_full": "                   DIPOLE_DIR   *! periodic dipole direction!*\n\nType: String                                                       Level: Basic\n\nSpecifies the direction of the spurious dipole-dipole interactions due  to periodic boundary conditions. Can be 1D Cartesian x/y/z or  (if DIPOLE_CORRECTION = SELF CONSISTENT) all 3D.\nModifiable: restart only\nAllowed values: X, Y, Z, A (=all)\nDefault value : Z\n\n", "key_level": "basic", "value_type": "string"}, "spin_treatment": {"key_type": "PARAM", "help_short": "electronic spin treatment", "help_full": "                 SPIN_TREATMENT   *! electronic spin treatment!*\n\nType: String                                                       Level: Basic\n\nChoose the level of theory for treating the electronic spin.\nModifiable: never\nAllowed values:\nNONE (or PAIRED or FALSE) for a non-spin polarised calculation.\nSCALAR (or COLINEAR, COLLINEAR, POLARISED or POLARIZED) for a spin polarised calculation.\nVECTOR (or NONCOLINEAR or NONCOLLINEAR) for a non-collinear spin polarised calculation.\nNB if VECTOR then cannot use certain other keywords such as NUP or NDOWN etc.\nDefault value : NONE\n\n", "key_level": "basic", "value_type": "string"}, "mix_charge_gmax": {"key_type": "PARAM", "help_short": "maximum G-vector in charge mixing scheme", "help_full": "         MIX_CHARGE_GMAX   *! maximum G-vector in charge mixing scheme!*\n\nType: Physical                                                    Level: Expert\n\nDetermines the maximum G-vector component of charge density to mix within DM  scheme.\nModifiable: restart only\nAllowed values: (any) > 0.0\nDefault value : 1.5 /ANG\n\n", "key_level": "expert", "value_type": "physical"}, "write_cell_structure": {"key_type": "PARAM", "help_short": "output final structure in CELL format", "help_full": "        WRITE_CELL_STRUCTURE   *! output final structure in CELL format!*\n\nType: Boolean (Logical)                                            Level: Basic\n\nSpecifies whether or not to write the final structure in a CELL file format.\nModifiable: restart and on the fly\nAllowed values: TRUE or FALSE\nDefault value : FALSE\n\n", "key_level": "basic", "value_type": "boolean"}, "bs_kpoints_list": {"key_type": "CELL", "help_short": "Alias for BS_KPOINT_LIST", "help_full": "                BS_KPOINTS_LIST   *! Alias for BS_KPOINT_LIST !*\n\nType: Block                                                        Level: Basic\n\nDefault value: Determined from BS_KPOINT_LIST\n", "key_level": "basic", "value_type": "block"}, "grid_scale": {"key_type": "PARAM", "help_short": "standard grid size", "help_full": "                      GRID_SCALE   *! standard grid size!*\n\nType: Real                                                  Level: Intermediate\n\nDetermines the size of the standard grid as a multiple of the diameter of  the cut-off sphere.\nModifiable: never\nAllowed values: (any) > 0.0\nDefault value : 1.75\n\n", "key_level": "intermediate", "value_type": "real"}, "geom_tpsd_init_stepsize": {"key_type": "PARAM", "help_short": "initial 2-point SD stepsize", "help_full": "           GEOM_TPSD_INIT_STEPSIZE   *! initial 2-point SD stepsize!*\n\nType: Real                                                  Level: Intermediate\n\nIf GEOM_METHOD=TPSD\nIf GEOM_TPSD_INIT_STEPSIZE=0 then the default value is taken.\nModifiable: restart and on the fly\nAllowed values: (any) >= 0.0\nDefault value : calculated based on system\n\n", "key_level": "intermediate", "value_type": "real"}, "spectral_kpoint_mp_offset": {"key_type": "CELL", "help_short": "Spectral properties Monkhorst-Pack grid offset", "help_full": " SPECTRAL_KPOINT_MP_OFFSET   *! Spectral properties Monkhorst-Pack grid offset !*\n\nType: Real Vector                                                  Level: Basic\n\nThe offset of the origin of the Monkhorst-Pack set for a  Band structrure (density of states) calculation.  This is specified in fractional coordinates.  Default value: (0, 0, 0)\n", "key_level": "basic", "value_type": "real"}, "num_farms": {"key_type": "PARAM", "help_short": "number of task farms", "help_full": "                     NUM_FARMS   *! number of task farms !*\n\nType: Integer                                               Level: Intermediate\n\nSpecifies the number of current_params%task farms active in a PIMD or PHONON calculation.\nModifiable: restart only\nAllowed values: (any integer) > 0\nDefault value : 1\n\n", "key_level": "intermediate", "value_type": "integer"}, "magres_kpoint_path_spacing": {"key_type": "CELL", "help_short": "The magnetic resonance k-point path spacing", "help_full": " MAGRES_KPOINT_PATH_SPACING   *! The magnetic resonance k-point path spacing !*\n\nType: Physical                                                     Level: Basic\n\nThe spacing between points on the k-point path used for magnetic resonance calculations.\n", "key_level": "basic", "value_type": "physical"}, "sedc_apply": {"key_type": "PARAM", "help_short": "turn on/off semi-empirical dispersion/vdW correction scheme", "help_full": " SEDC_APPLY   *! turn on/off semi-empirical dispersion/vdW correction scheme !*\n\nType: Boolean (Logical)                                            Level: Basic\n\nSpecifies whether or not to apply any semi-empirical dispersion/van der Waals correction schemes.\nNow optional - maintained in v8 onwards for backwards compatability reasons\n- better to turn SEDC on/off using SEDC_SCHEME=NONE or TS etc.\nModifiable: restart and on the fly\nAllowed values: TRUE or FALSE\nDefault value : FALSE\n\n", "key_level": "basic", "value_type": "boolean"}, "kpoint_mp_offset": {"key_type": "CELL", "help_short": "Alias for KPOINTS_MP_OFFSET", "help_full": "              KPOINT_MP_OFFSET   *! Alias for KPOINTS_MP_OFFSET !*\n\nType: Real Vector                                                  Level: Basic\n\nDefault value: Determined from KPOINTS_MP_OFFSET\n", "key_level": "basic", "value_type": "real"}, "geom_stress_tol": {"key_type": "PARAM", "help_short": "geometry optimization stress convergence tolerance", "help_full": "    GEOM_STRESS_TOL   *! geometry optimization stress convergence tolerance!*\n\nType: Physical                                                     Level: Basic\n\nTolerance for accepting convergence of the maximum stress component during  unit cell optimization.\nModifiable: restart and on the fly\nAllowed values: (any) > 0.0\nDefault value : 0.1 GPa\n\n", "key_level": "basic", "value_type": "physical"}, "finite_basis_corr": {"key_type": "PARAM", "help_short": "finite basis set correction", "help_full": "              FINITE_BASIS_CORR   *! finite basis set correction!*\n\nType: String                                                       Level: Basic\n\nDetermines whether or not to correct energy and stress for finite basis set  when cell parameters change.\nIf =0 or NONE      then does no correction.\nIf =1 or MANUAL    then do manual correction using specified BASIS_DE_DLOGE.\nIf =2 or AUTOMATIC then do automatic correction using FINITE_BASIS_NPOINTS and FINITE_BASIS_SPACING.\nModifiable: restart only\nAllowed values: 0, 1, 2 or NONE, MANUAL, AUTOMATIC\nDefault value : NONE unless CALCULATE_STRESS or TASK requires moving atoms\n\n", "key_level": "basic", "value_type": "string"}, "md_eqm_ion_t": {"key_type": "PARAM", "help_short": "MD equilibration time for ions", "help_full": "               MD_EQM_ION_T   *! MD equilibration time for ions!*\n\nType: Physical                                                     Level: Basic\n\nSpecify characteristic time for ions to use in enhanced MD equilibration method.\nModifiable: restart and on the fly\nAllowed values: (any) > MD_DELTA_T\nDefault value : MD_ION_T\n\n", "key_level": "basic", "value_type": "physical"}, "max_scf_cycles": {"key_type": "PARAM", "help_short": "maximum SCF cycles", "help_full": "                    MAX_SCF_CYCLES   *! maximum SCF cycles!*\n\nType: Integer                                               Level: Intermediate\n\nThe maximum number of SCF cycles in an electronic minimization regardless of  convergence.\nModifiable: restart and on the fly\nAllowed values: (any integer) > 0\nDefault value : 30\n\n", "key_level": "intermediate", "value_type": "integer"}, "write_cst_esp": {"key_type": "PARAM", "help_short": "output cst_esp file", "help_full": "                    WRITE_CST_ESP   *! output cst_esp file!*\n\nType: Boolean (Logical)                                            Level: Basic\n\nSpecifies whether or not to write out the electrostatic potential file for this run.\nModifiable: restart and on the fly\nAllowed values: TRUE or FALSE\nDefault value : TRUE\n\n", "key_level": "basic", "value_type": "boolean"}, "phonon_sum_rule": {"key_type": "PARAM", "help_short": "enforce phonon sum rule - DEPRECATED", "help_full": "           PHONON_SUM_RULE   *! enforce phonon sum rule - DEPRECATED!*\n\nType: Boolean (Logical)                                            Level: Basic\n\nDEPRECATED way to explicitly correct the dynamical matrix to enforce the  acoustic q=0 phonon sum rule, i.e. that 3 modes have zero frequency at q=0.\nShould use PHONON_SUM_RULE_METHOD instead.\nModifiable: restart and on the fly\nAllowed values: TRUE or FALSE\nDefault value : FALSE\n\n", "key_level": "basic", "value_type": "boolean"}, "k_scrn_averaging_scheme": {"key_type": "PARAM", "help_short": "OBSOLETE", "help_full": "                    K_SCRN_AVERAGING_SCHEME   *! OBSOLETE !*\n\nType: String                                                Level: Intermediate\n\nNB This is an OBSOLETE form - please use NLXC_K_SCRN_AVERAGING_SCHEME instead.\n\n", "key_level": "intermediate", "value_type": "string"}, "sedc_scheme": {"key_type": "PARAM", "help_short": "semi-empirical dispersion/vdW correction scheme", "help_full": "       SEDC_SCHEME   *! semi-empirical dispersion/vdW correction scheme !*\n\nType: String                                                       Level: Basic\n\nThe semi-empirical dispersion/van der Waals correction scheme to use.\nModifiable: restart and on the fly\nAllowed values: NONE; OBS = Phys. Rev. B 73, 205101, (2006); G06 = J. Comput. Chem. 27, 1787, (2006);\nJCHS = J. Comput. Chem. 28, 555, (2007); TS = Phys. Rev. Lett.,102, 073005 (2009);\nTSsurf = Phys. Rev. Lett., 108, 146103 (2012);\n(A)MBD and (A)TSSCS = Phys. Rev. Lett., 108, 236402 (2012);\n(A)MBD* = J. Chem. Phys. 140, 18A508 (2014).\nNB Not all XC_FUNCTIONAL values are supported for all schemes - if in doubt use PBE.\nDefault value : NONE (or TS if SEDC_APPLY=TRUE)\n\n", "key_level": "basic", "value_type": "string"}, "write_formatted_potential": {"key_type": "PARAM", "help_short": "formatted potential on/off", "help_full": "           WRITE_FORMATTED_POTENTIAL   *! formatted potential on/off!*\n\nType: Boolean (Logical)                                            Level: Basic\n\nSpecifies whether or not to write out final local potential to formatted file.\nModifiable: restart and on the fly\nAllowed values: TRUE or FALSE\nDefault value : FALSE\n\n", "key_level": "basic", "value_type": "boolean"}, "phonon_dos_limit": {"key_type": "PARAM", "help_short": "density of states upper limit", "help_full": "             PHONON_DOS_LIMIT   *! density of states upper limit !*\n\nType: Physical                                                     Level: Basic\n\nThe largest phonon to be included in a phonon density-of-states calculation.\nModifiable: restart and on the fly\nAllowed values: (any) > PHONON_DOS_SPACING\nDefault value : 5000.0 CM^-1\n\n", "key_level": "basic", "value_type": "physical"}, "bs_perc_extra_bands": {"key_type": "PARAM", "help_short": "percentage of extra bandstructure bands", "help_full": "       BS_PERC_EXTRA_BANDS   *! percentage of extra bandstructure bands!*\n\nType: Real                                                  Level: Intermediate\n\nThe percentage of extra bands in a bandstructure calculation above NBANDS.\nModifiable: restart and on the fly\nAllowed values: (any) >= 0.0\nDefault value : 0.0\n\n", "key_level": "intermediate", "value_type": "real"}, "magres_kpoint_mp_spacing": {"key_type": "CELL", "help_short": "The spacing of points on the fine MP set for magnetic resonance calculations", "help_full": " MAGRES_KPOINT_MP_SPACING   *! The spacing of points on the fine MP set for magne\n\nType: Physical                                                     Level: Basic\n\nThis specifies the miminum spacing bewteen points on a Monkhorst-Pack grid that magnetic resonance properties will be calculated with.\nExample:\nmagres_kpoint_mp_spacing 0.05 1/ang\n\nDefault: same as the SCF k-point set.\n", "key_level": "basic", "value_type": "physical"}, "optics_kpoints_mp_grid": {"key_type": "CELL", "help_short": "Monkhorst-Pack grid for optics", "help_full": "          OPTICS_KPOINTS_MP_GRID   *! Monkhorst-Pack grid for optics !*\n\nType: Integer Vector                                               Level: Basic\n\nThe k-points defined by a Monkhorst-Pack grid used for calculating optical properties. Example:\noptics_kpoints_mp_grid 3 5 4\n\nDefault value: None\n", "key_level": "basic", "value_type": "integer"}, "nlxc_exchange_screening": {"key_type": "PARAM", "help_short": "OBSOLETE", "help_full": "                    NLXC_EXCHANGE_SCREENING   *! OBSOLETE !*\n\nType: Physical                                                     Level: Basic\n\nNB This keyword has been removed.\n\n", "key_level": "basic", "value_type": "physical"}, "positions_frac": {"key_type": "CELL", "help_short": "Atomic positions", "help_full": "                     POSITIONS_FRAC   *! Atomic positions !*\n\nType: Block                                                        Level: Basic\n\nThe species followed by the atomic position in fractional coordinates.  The species may be given as the chemical symbol or atomic number followed  by the atomic position in fractional coordinates.\nExample:\n%block positions_frac\nSi 0.25 0.25 0.25\n%endblock positions_frac\n\nOptional modifiers may be appended to each line to individually specify\n(a) initial spin\nExample:\n%block positions_frac\nSi 0.25 0.25 0.25   SPIN=- 3  !  collinear (scalar) spin\n%endblock positions_frac\nor\n%block positions_frac\nSi 0.25 0.25 0.25   SPIN=(-1.5 -1.5 1.5) !  noncollinear (vector) spin\n%endblock positions_frac\n\n(b) VCA mixture atoms\nExample:\n%block positions_frac\nSi 0.25 0.25 0.25 MIXTURE=(1 0.5)\n%endblock positions_frac\n\n(c) an identifying label\nExample:\n%block positions_frac\nSi 0.25 0.25 0.25  LABEL=Si33\n%endblock positions_frac\n\nDefault value: None.\n", "key_level": "basic", "value_type": "block"}, "md_hug_dir": {"key_type": "PARAM", "help_short": "Hugoniostat compression direction", "help_full": "               MD_HUG_DIR   *! Hugoniostat compression direction!*\n\nType: String                                                       Level: Basic\n\nSpecify how the cell is compressed in a Hugoniostat calculation.\nModifiable: restart only\nAllowed values: XDIR, YDIR, ZDIR, ISO, ISOTROPIC\nDefault value : ISO\n\n", "key_level": "basic", "value_type": "string"}, "phonon_preconditioner": {"key_type": "PARAM", "help_short": "scheme to use in LR", "help_full": "                PHONON_PRECONDITIONER   *! scheme to use in LR!*\n\nType: String                                                       Level: Basic\n\nThe preconditioning scheme used by the CG minimiser in LR.\nModifiable: restart and on the fly\nAllowed values: RTPA, TPA, PS, HR, NONE\nDefault value : TPA\n\n", "key_level": "basic", "value_type": "string"}, "phonon_kpoints_list": {"key_type": "CELL", "help_short": "Alias for PHONON_KPOINT_LIST", "help_full": "            PHONON_KPOINTS_LIST   *! Alias for PHONON_KPOINT_LIST !*\n\nType: Block                                                        Level: Basic\n\nDefault value: Determined from PHONON_KPOINT_LIST\n", "key_level": "basic", "value_type": "block"}, "nlxc_re_est_k_scrn": {"key_type": "PARAM", "help_short": "update k-screening length?", "help_full": "              NLXC_RE_EST_K_SCRN   *! update k-screening length? !*\n\nType: Boolean (Logical)                                     Level: Intermediate\n\nSpecifies whether or not to update the estimate of the k-screening length  in Vxc as the density changes.\nSee also NLXC_K_SCRN_AVERAGING_SCHEME.\nModifiable: restart only\nAllowed values: TRUE or FALSE\nDefault value : FALSE\n\n", "key_level": "intermediate", "value_type": "boolean"}, "write_bib": {"key_type": "PARAM", "help_short": "output BibTeX references", "help_full": "                    WRITE_BIB   *! output BibTeX references!*\n\nType: Boolean (Logical)                                            Level: Basic\n\nSpecifies whether or not to write a list of references used in this particular\nrun in BibTeX format.\nModifiable: restart and on the fly\nAllowed values: TRUE or FALSE\nDefault value : TRUE\n\n", "key_level": "basic", "value_type": "boolean"}, "spectral_theory": {"key_type": "PARAM", "help_short": "theory level in spectral calc", "help_full": "              SPECTRAL_THEORY   *! theory level in spectral calc!*\n\nType: String                                                       Level: Basic\n\nThe level of theory to use when doing electronic spectroscopy calculations.\nModifiable: restart and on the fly\nAllowed values: DFT, TDDFT, G0W0\nDefault value : DFT\n\n", "key_level": "basic", "value_type": "string"}, "spectral_kpoint_mp_grid": {"key_type": "CELL", "help_short": "Spectral properties Monkhorst-Pack grid", "help_full": "     SPECTRAL_KPOINT_MP_GRID   *! Spectral properties Monkhorst-Pack grid !*\n\nType: Integer Vector                                               Level: Basic\n\nThe k-points defined by a Monkhorst-Pack grid for a band stucture calculation.  This is mainly used for density of states calculations.  Default value: Determined from SPECTRAL_KPOINT_SPACING.\n", "key_level": "basic", "value_type": "integer"}, "tddft_eigenvalue_tol": {"key_type": "PARAM", "help_short": "state convergence tolerance", "help_full": "             TDDFT_EIGENVALUE_TOL   *! state convergence tolerance!*\n\nType: Physical                                                     Level: Basic\n\nTolerance for accepting convergence of a single eigenvalue/state during  tddft calculation. The difference between max and min energies over  TDDFT_CONVERGENCE_WIN iterations must be less than this.\nModifiable: restart and on the fly\nAllowed values: (any) > 0.0\nDefault value : 10^-6 eV/eigenvalue\n\n", "key_level": "basic", "value_type": "physical"}, "elec_method": {"key_type": "PARAM", "help_short": "treatment of metals or finite temperature insulator", "help_full": "     ELEC_METHOD   *! treatment of metals or finite temperature insulator!*\n\nType: String                                                       Level: Basic\n\nThe treatment of metals or finite temperature insulator to be used.\nAn alias for METALS_METHOD.\nModifiable: restart and on the fly\nAllowed values: NONE (=ALLBANDS), DM, EDFT\nDefault value : DM\n\n", "key_level": "basic", "value_type": "string"}, "pdos_calculate_weights": {"key_type": "PARAM", "help_short": "partial DOS analysis on/off", "help_full": "            PDOS_CALCULATE_WEIGHTS   *! partial DOS analysis on/off!*\n\nType: Boolean (Logical)                                            Level: Basic\n\nSpecifies whether or not to do a partial DOS calculation.\nModifiable: restart and on the fly\nAllowed values: TRUE or FALSE\nDefault value : FALSE\n\n", "key_level": "basic", "value_type": "boolean"}, "elec_restore_file": {"key_type": "PARAM", "help_short": "wavefunction/density etc restore filename on reuse/continuation", "help_full": " ELEC_RESTORE_FILE   *! wavefunction/density etc restore filename on reuse/contin\n\nType: String                                                       Level: Basic\n\nName of file (ELEC_DUMP_FILE) to restore wavefunctions, density, etc from during  a current_params%reuse/current_params%continuation. If set to NULL then nothing will be read.\nModifiable: restart only\nAllowed values: up to 255 character filename\nDefault value : NULL\n\n", "key_level": "basic", "value_type": "string"}, "magres_conv_tol": {"key_type": "PARAM", "help_short": "energy convergence tolerance in magres calc", "help_full": "       MAGRES_CONV_TOL   *! energy convergence tolerance in magres calc!*\n\nType: Physical                                                     Level: Basic\n\nEnergy tolerance for accepting convergence during magres calculation.\nThe difference between max and min energy values over MAGRES_CONVERGENCE_WIN  iterations must be less than this.\nModifiable: restart and on the fly\nAllowed values: (any) > 0.0\nDefault value : 10^-12 eV if MAGRES_METHOD=CRYSTAL or 10^-9 eV otherwise\n\n", "key_level": "basic", "value_type": "physical"}, "spectral_task": {"key_type": "PARAM", "help_short": "type of spectrum to calculate", "help_full": "               SPECTRAL_TASK   *! type of spectrum to calculate!*\n\nType: String                                                       Level: Basic\n\nThe type of electronic spectrum to calculate.\nModifiable: restart and on the fly\nAllowed values: BANDSTRUCTURE, DOS, OPTICS, CORELOSS, ALL\nDefault value : BANDSTRUCTURE\n\n", "key_level": "basic", "value_type": "string"}, "kpoint_list": {"key_type": "CELL", "help_short": "Alias for KPOINTS_LIST", "help_full": "                   KPOINT_LIST   *! Alias for KPOINTS_LIST !*\n\nType: Block                                                        Level: Basic\n\nDefault value: Determined from KPOINTS_LIST\n", "key_level": "basic", "value_type": "block"}, "_CASTEP_VERSION": "17.2", "md_use_pathint": {"key_type": "PARAM", "help_short": "PIMD on/off", "help_full": "                        MD_USE_PATHINT   *! PIMD on/off!*\n\nType: Boolean (Logical)                                            Level: Basic\n\nUsed to turn path integral MD on (true) or off.\nModifiable: restart only\nAllowed values: TRUE or FALSE\nDefault value : FALSE\n\n", "key_level": "basic", "value_type": "boolean"}, "frequency_unit": {"key_type": "PARAM", "help_short": "unit of frequency in output", "help_full": "                FREQUENCY_UNIT   *! unit of frequency in output!*\n\nType: String                                                Level: Intermediate\n\nControls the units used for all frequencies in output - many different units  are supported.\nModifiable: restart and on the fly\nDefault value : CM-1\n\n", "key_level": "intermediate", "value_type": "string"}, "elnes_xc_definition": {"key_type": "PARAM", "help_short": "elnes exchange-correlation functional", "help_full": "        ELNES_XC_DEFINITION   *! elnes exchange-correlation functional!*\n\nType: Block                                                        Level: Basic\n\nThe functional to use when calculating the exchange-correlation potential during\nan elnes calculation.\nThis version is a BLOCK keyword, with the flexibility to allow an arbitrary\nmixing of any of the basic ELNES_XC_FUNCTIONAL components.\nBasic format: a series of separate lines, each containing <func> <weight>\nwhere <func> is the appropriate kernel for either eXchange or Correlation or both\nand <weight> is supposed to add to 1.0 for both eXchange and Correlation.\nModifiable: restart only\nDefault value : set by XC_FUNCTIONAL\n\n", "key_level": "basic", "value_type": "block"}, "magres_kpoint_mp_offset": {"key_type": "CELL", "help_short": "Origin offset of the magnetic resonance MP grid", "help_full": " MAGRES_KPOINT_MP_OFFSET   *! Origin offset of the magnetic resonance MP grid !*\n\nType: Real Vector                                                  Level: Basic\n\nThe offset of the Monkhorst-Pack grid that magnetic resonance properties are calculated.\n", "key_level": "basic", "value_type": "real"}, "spectral_kpoints_mp_spacing": {"key_type": "CELL", "help_short": "Alias for SPECTRAL_KPOINT_MP_SPACING", "help_full": "    SPECTRAL_KPOINTS_MP_SPACING   *! Alias for SPECTRAL_KPOINT_MP_SPACING !*\n\nType: Physical                                                     Level: Basic\n\nDefault value: Determined from SPECTRAL_KPOINT_MP_SPACING\n", "key_level": "basic", "value_type": "physical"}, "nbands": {"key_type": "PARAM", "help_short": "number of bands", "help_full": "                          NBANDS   *! number of bands!*\n\nType: Integer                                                      Level: Basic\n\nThe maximum number of bands at any given k-point and spin component.\nCan also be determined by NEXTRA_BANDS or PERC_EXTRA_BANDS.\nModifiable: never\nAllowed values: (any) >= MAX(NUP,NDOWN)\nDefault value : MAX(NUP,NDOWN) + (NEXTRA_BANDS or PERC_EXTRA_BANDS)\n\n", "key_level": "basic", "value_type": "integer"}, "wannier_print_cube": {"key_type": "PARAM", "help_short": "Number of Wannier function to print out", "help_full": "       WANNIER_PRINT_CUBE   *! Number of Wannier function to print out !*\n\nType: Integer                                               Level: Intermediate\n\nThe number of the (maximally localised) Wannier function to print out in .cube  (+ .pdb) format file.\nModifiable: restart and on the fly\nAllowed values: (any integer) > 0\nDefault value : 0\n\n", "key_level": "intermediate", "value_type": "integer"}, "k_scrn_den_function": {"key_type": "PARAM", "help_short": "OBSOLETE", "help_full": "                      K_SCRN_DEN_FUNCTION   *! OBSOLETE !*\n\nType: String                                                Level: Intermediate\n\nNB This keyword has been removed.\n\n", "key_level": "intermediate", "value_type": "string"}, "velocity_unit": {"key_type": "PARAM", "help_short": "unit of velocity in output", "help_full": "                 VELOCITY_UNIT   *! unit of velocity in output!*\n\nType: String                                                Level: Intermediate\n\nControls the units used for all velocities in output - many different units  are supported.\nModifiable: restart and on the fly\nDefault value : ANG/PS\n\n", "key_level": "intermediate", "value_type": "string"}, "optics_kpoint_mp_grid": {"key_type": "CELL", "help_short": "Alias for OPTICS_KPOINTS_MP_GRID", "help_full": "         OPTICS_KPOINT_MP_GRID   *! Alias for OPTICS_KPOINTS_MP_GRID !*\n\nType: Integer Vector                                               Level: Basic\n\nDefault value: Determined from OPTICS_KPOINTS_MP_GRID\n", "key_level": "basic", "value_type": "integer"}, "bs_xc_definition": {"key_type": "PARAM", "help_short": "BS exchange-correlation functional", "help_full": "           BS_XC_DEFINITION   *! BS exchange-correlation functional!*\n\nType: Block                                                        Level: Basic\n\nThe functional to use when calculating the exchange-correlation potential during\na bandstructure calculation.\nThis version is a BLOCK keyword, with the flexibility to allow an arbitrary\nmixing of any of the basic BS_XC_FUNCTIONAL components.\nBasic format: a series of separate lines, each containing <func> <weight>\nwhere <func> is the appropriate kernel for either eXchange or Correlation or both\nand <weight> is supposed to add to 1.0 for both eXchange and Correlation.\nModifiable: restart only\nDefault value : set by XC_FUNCTIONAL\n\n", "key_level": "basic", "value_type": "block"}, "supercell_matrix": {"key_type": "CELL", "help_short": "Supercell matrix for creating supercell", "help_full": "        SUPERCELL_MATRIX   *! Supercell matrix for creating supercell !*\n\nType: Block                                                        Level: Basic\n\nThe supercell matrix for multiplying up the supplied unit cell. The supercell matrix is specified by a 3x3 integer matrix which  gives the supercell used in the calculation.\nExample:\n%block supercell_matrix\n2 0 0\n0 3 0\n0 0 2\n%endblock supercell_matrix\n\nDefault : Identity matrix\n", "key_level": "basic", "value_type": "block"}, "spin_polarized": {"key_type": "PARAM", "help_short": "spin polarized", "help_full": "                      SPIN_POLARIZED   *! spin polarized!*\n\nType: Boolean (Logical)                                            Level: Basic\n\nTurns on/off spin polarization.\nModifiable: never\nAllowed values: TRUE or FALSE\nDefault value : FALSE unless SPIN>0\n\n", "key_level": "basic", "value_type": "boolean"}, "efield_calc_ion_permittivity": {"key_type": "PARAM", "help_short": "calculate zero-frequency permittivity", "help_full": "   EFIELD_CALC_ION_PERMITTIVITY   *! calculate zero-frequency permittivity !*\n\nType: Boolean (Logical)                                     Level: Intermediate\n\nSpecifies whether or not to compute the zero-frequency dielectric permittivity  based on the ionic response to electric fields. This requires a gamma-point  phonon calculation in addition to the EFIELD linear response one.\nModifiable: restart and on the fly\nAllowed values: TRUE or FALSE\nDefault value : TRUE\n\n", "key_level": "intermediate", "value_type": "boolean"}, "basis_de_dloge": {"key_type": "PARAM", "help_short": "d(Etot)/d(log(Ecut))", "help_full": "                   BASIS_DE_DLOGE   *! d(Etot)/d(log(Ecut))!*\n\nType: Physical                                              Level: Intermediate\n\nDerivative of total energy w.r.t. natural log of basis cut-off energy.\nModifiable: restart only\nAllowed values: (any)\nDefault value : 0.0\n\n", "key_level": "intermediate", "value_type": "physical"}, "write_formatted_density": {"key_type": "PARAM", "help_short": "formatted density on/off", "help_full": "             WRITE_FORMATTED_DENSITY   *! formatted density on/off!*\n\nType: Boolean (Logical)                                            Level: Basic\n\nSpecifies whether or not to write out final electron density to formatted file.\nModifiable: restart and on the fly\nAllowed values: TRUE or FALSE\nDefault value : FALSE\n\n", "key_level": "basic", "value_type": "boolean"}, "kpoint_mp_grid": {"key_type": "CELL", "help_short": "Alias for KPOINTS_MP_GRID", "help_full": "                KPOINT_MP_GRID   *! Alias for KPOINTS_MP_GRID !*\n\nType: Integer Vector                                               Level: Basic\n\nDefault value: Determined from KPOINTS_MP_GRID\n", "key_level": "basic", "value_type": "integer"}, "hubbard_u": {"key_type": "CELL", "help_short": "The Hubbard U for each species and orbital", "help_full": "          HUBBARD_U   *! The Hubbard U for each species and orbital !*\n\nType: Block                                                        Level: Basic\n\nThe Hubbard U is used in DFT+U calculations. Default value for all orbitals on all species is zero.\n", "key_level": "basic", "value_type": "block"}, "phonon_fine_kpoint_path": {"key_type": "CELL", "help_short": "Path of phonon wavevectors on a fine scale", "help_full": "   PHONON_FINE_KPOINT_PATH   *! Path of phonon wavevectors on a fine scale !*\n\nType: Block                                                        Level: Basic\n\nPhonon frequencies are calculated on a coarse set of wavevectors using DFPT and interpolated onto this finer path.\n", "key_level": "basic", "value_type": "block"}, "nextra_bands": {"key_type": "PARAM", "help_short": "number of extra bands", "help_full": "                    NEXTRA_BANDS   *! number of extra bands!*\n\nType: Integer                                               Level: Intermediate\n\nThe number of extra bands above current_params%nelectrons/2.\nNecessary for metal or finite temperature insulator.\nModifiable: never\nAllowed values: (any integer) >= 0\nDefault value : 0 if FIX_OCCUPANCY or 4 otherwise\n\n", "key_level": "intermediate", "value_type": "integer"}, "popn_calculate": {"key_type": "PARAM", "help_short": "population analysis on/off", "help_full": "                POPN_CALCULATE   *! population analysis on/off!*\n\nType: Boolean (Logical)                                            Level: Basic\n\nSpecifies whether or not to do a population analysis of the charge density.\nModifiable: restart and on the fly\nAllowed values: TRUE or FALSE\nDefault value : TRUE\n\n", "key_level": "basic", "value_type": "boolean"}, "entropy_unit": {"key_type": "PARAM", "help_short": "unit of entropy in output", "help_full": "                  ENTROPY_UNIT   *! unit of entropy in output!*\n\nType: String                                                Level: Intermediate\n\nControls the units used for all entropy in output - many different  units are supported.\nModifiable: restart and on the fly\nDefault value : J/MOL/K\n\n", "key_level": "intermediate", "value_type": "string"}, "pspot_nonlocal_type": {"key_type": "PARAM", "help_short": "pseudopotential representation", "help_full": "            PSPOT_NONLOCAL_TYPE   *! pseudopotential representation!*\n\nType: String                                                       Level: Basic\n\nSpecify the non-local pseudopotential representation.\nModifiable: never\nAllowed values: REAL or RECIPROCAL\nDefault value : RECIPROCAL\n\n", "key_level": "basic", "value_type": "string"}, "tddft_nextra_states": {"key_type": "PARAM", "help_short": "number of extra TDDFT states", "help_full": "             TDDFT_NEXTRA_STATES   *! number of extra TDDFT states!*\n\nType: Integer                                               Level: Intermediate\n\nThe number of extra states in a TDDFT calculation above TDDFT_NUM_STATES,  these extra states are not checked for eigenvalue convergence.  Note: only used if TDDFT_SOLVER = DAVIDSON\nModifiable: restart and on the fly\nAllowed values: (any integer) >= 0\nDefault value : set by floor(SQRT(TDDFT_NUM_STATES))\n\n", "key_level": "intermediate", "value_type": "integer"}, "calculate_stress": {"key_type": "PARAM", "help_short": "stress on/off", "help_full": "                      CALCULATE_STRESS   *! stress on/off!*\n\nType: Boolean (Logical)                                            Level: Basic\n\nSpecifies whether or not to perform a stress calculation.\nModifiable: restart and on the fly\nAllowed values: TRUE or FALSE\nDefault value : FALSE\n\n", "key_level": "basic", "value_type": "boolean"}, "phonon_force_constant_cutoff": {"key_type": "PARAM", "help_short": "Cutoff for force constant matrix", "help_full": "      PHONON_FORCE_CONSTANT_CUTOFF   *! Cutoff for force constant matrix !*\n\nType: Physical                                                     Level: Basic\n\nThe cutoff for the force constant matrix in a phonon calculation on a fine  grid with supercell method.\nModifiable: restart and on the fly\nAllowed values: (any) >= 0.0\nDefault value : 0.0\n\n", "key_level": "basic", "value_type": "physical"}, "efield_oscillator_q": {"key_type": "PARAM", "help_short": "Q-factor for line-shape broadening", "help_full": "          EFIELD_OSCILLATOR_Q   *! Q-factor for line-shape broadening!*\n\nType: Real                                                  Level: Intermediate\n\nOscillator Q-factor for line-shape broadening in calculation of frequency-  dependent permittivity.\nModifiable: restart and on the fly\nAllowed values: (any) > 0.0\nDefault value : 50.0\n\n", "key_level": "intermediate", "value_type": "real"}, "positions_abs_intermediate": {"key_type": "CELL", "help_short": "Transition state search intermediate state", "help_full": "  POSITIONS_ABS_INTERMEDIATE   *! Transition state search intermediate state !*\n\nType: Block                                                        Level: Basic\n\nThe positions of the atoms, in absolute coordinates,  for the intermediate transition state product.  Optionally, units of length may be specified.  Default value: The initial atomic positions.\n", "key_level": "basic", "value_type": "block"}, "wannier_ion_moments": {"key_type": "PARAM", "help_short": "Compute ion multipole moments from Wannier functions", "help_full": " WANNIER_ION_MOMENTS   *! Compute ion multipole moments from Wannier functions !*\n\nType: Boolean (Logical)                                     Level: Intermediate\n\nSelects whether or not to compute ion multipole moments from maximally localised  Wannier functions.\nModifiable: restart and on the fly\nAllowed values: TRUE or FALSE\nDefault value : FALSE\n\n", "key_level": "intermediate", "value_type": "boolean"}, "ga_mutate_rate": {"key_type": "PARAM", "help_short": "GA mutation rate (probability)", "help_full": "              GA_MUTATE_RATE   *! GA mutation rate (probability)!*\n\nType: Real                                                         Level: Basic\n\nProbability of a mutation for each degree of freedom after GA crossover.\nModifiable: restart and on the fly\nAllowed values: 0.0 < GA_MUTATE_RATE < 1.0\nDefault value : 0.15\n\n", "key_level": "basic", "value_type": "real"}, "iprint": {"key_type": "PARAM", "help_short": "verbosity control", "help_full": "                         IPRINT   *! verbosity control!*\n\nType: Integer                                                      Level: Basic\n\nControls the amount of detail in the output.\nModifiable: restart and on the fly\nAllowed values: 1, 2, 3\nDefault value : 1\n\n", "key_level": "basic", "value_type": "integer"}, "elec_eigenvalue_tol": {"key_type": "PARAM", "help_short": "eigenvalue convergence tolerance", "help_full": "           ELEC_EIGENVALUE_TOL   *! eigenvalue convergence tolerance!*\n\nType: Physical                                                     Level: Basic\n\nTolerance for accepting convergence of a single eigenvalue during DM/DIIS  minimization. The difference between max and min energies over  current_params%elec_convergence_win iterations must be less than this.\nModifiable: restart and on the fly\nAllowed values: (any) > 0.0\nDefault value : 10^-6 eV\n\n", "key_level": "basic", "value_type": "physical"}, "kpoints_mp_spacing": {"key_type": "CELL", "help_short": "SCF Monkhorst-Pack grid density", "help_full": "           KPOINTS_MP_SPACING   *! SCF Monkhorst-Pack grid density !*\n\nType: Physical                                                     Level: Basic\n\nThe k-point density of a Monkhorst-Pack grid.  Units of inverse length should be specified.\nExample:\nkpoints_mp_spacing 0.05 1/ang\n\nDefault value: 0.1 1/ang.\n", "key_level": "basic", "value_type": "physical"}, "md_damping_scheme": {"key_type": "PARAM", "help_short": "damped MD scheme for geometry optimization", "help_full": "       MD_DAMPING_SCHEME   *! damped MD scheme for geometry optimization!*\n\nType: String                                                       Level: Basic\n\nThe scheme with which to calculate the optimal damping parameters for damped  MD in geometry optimization. Can use independent modes algorithm, coupled  modes algorithm or steepest descent dynamics.\nModifiable: restart and on the fly\nAllowed values: INDEPENDENT, COUPLED, STEEPESTDESCENTS\nDefault value : INDEPENDENT\n\n", "key_level": "basic", "value_type": "string"}, "chemical_potential": {"key_type": "CELL", "help_short": "The chemical potential of each species", "help_full": "        CHEMICAL_POTENTIAL   *! The chemical potential of each species !*\n\nType: Block                                                        Level: Basic\n\nThe chemical potential used in free energy calculations. Default value for each species is zero.\n", "key_level": "basic", "value_type": "block"}, "md_extrap": {"key_type": "PARAM", "help_short": "MD wavefunction extrapolation scheme", "help_full": "              MD_EXTRAP   *! MD wavefunction extrapolation scheme!*\n\nType: String                                                       Level: Basic\n\nThe wavefunction extrapolation scheme for molecular dynamics.\nAlso used for charge density extrapolation within DM scheme.\nModifiable: restart only\nAllowed values: NONE, FIRST, SECOND, MIXED\nDefault value : FIRST\n\n", "key_level": "basic", "value_type": "string"}, "opt_strategy_bias": {"key_type": "PARAM", "help_short": "optimization strategy bias", "help_full": "               OPT_STRATEGY_BIAS   *! optimization strategy bias!*\n\nType: Integer                                               Level: Intermediate\n\nControls the optimization strategy used:\n+1,+2,+3 => increasing bias to speed optimisation;\n0        => default optimisation;\n-1,-2,-3 => increasing bias to memory minimisation.\nModifiable: restart only\nAllowed values: -3 <= (integer) <= 3\nDefault value : 0\n\n", "key_level": "intermediate", "value_type": "integer"}, "phonon_write_dynamical": {"key_type": "PARAM", "help_short": "Write out reciprocal space dynamical matrix", "help_full": "   PHONON_WRITE_DYNAMICAL   *! Write out reciprocal space dynamical matrix !*\n\nType: Boolean (Logical)                                            Level: Basic\n\nSelects whether to write out the reciprocal space dynamical matrices  from a phonon  calculation (to the <seedname>.castep file).\nModifiable: restart and on the fly\nAllowed values: TRUE or FALSE\nDefault value : FALSE\n\n", "key_level": "basic", "value_type": "boolean"}, "supercell_kpoints_mp_offset": {"key_type": "CELL", "help_short": "SCF Monkhorst Pack grid offset for a FD phonon supercell calculation", "help_full": " SUPERCELL_KPOINTS_MP_OFFSET   *! SCF Monkhorst Pack grid offset for a FD phonon\n\nType: Real Vector                                                  Level: Basic\n\nThe offset of the origin of the Monkhorst-Pack set in fractional coordinates  when performing a finite displacement phonon calculation.  Default value: (0, 0, 0).\n", "key_level": "basic", "value_type": "real"}, "optics_kpoint_list": {"key_type": "CELL", "help_short": "Alias for OPTICS_KPOINTS_LIST", "help_full": "            OPTICS_KPOINT_LIST   *! Alias for OPTICS_KPOINTS_LIST !*\n\nType: Block                                                        Level: Basic\n\nDefault value: Determined from OPTICS_KPOINTS_LIST\n", "key_level": "basic", "value_type": "block"}, "mass_unit": {"key_type": "PARAM", "help_short": "unit of mass in output", "help_full": "                     MASS_UNIT   *! unit of mass in output!*\n\nType: String                                                Level: Intermediate\n\nControls the units used for all masses in output - many different units  are supported.\nModifiable: restart and on the fly\nDefault value : AMU\n\n", "key_level": "intermediate", "value_type": "string"}, "tssearch_energy_tol": {"key_type": "PARAM", "help_short": "energy convergence tolerance in NEB search", "help_full": "      TSSEARCH_ENERGY_TOL   *! energy convergence tolerance in NEB search!*\n\nType: Physical                                                     Level: Basic\n\nTolerance for accepting convergence of the maximum energy difference  during NEB search.\nModifiable: restart and on the fly\nAllowed values: (any) > 0.0\nDefault value : 0.00002 HARTREE\n\n", "key_level": "basic", "value_type": "physical"}, "nlxc_div_corr_npts_step": {"key_type": "PARAM", "help_short": "step in npts for testing convergence", "help_full": "      NLXC_DIV_CORR_NPTS_STEP   *! step in npts for testing convergence !*\n\nType: Integer                                                     Level: Expert\n\nStep in number of points used when testing convergence of the intergal for  the divergence correction.\nModifiable: restart only\nAllowed values: (any integer) > 0\nDefault value : 6\n\n", "key_level": "expert", "value_type": "integer"}, "cell_constraints": {"key_type": "CELL", "help_short": "Constrains on unit cell parameters", "help_full": "           CELL_CONSTRAINTS   *! Constrains on unit cell parameters !*\n\nType: Block                                                        Level: Basic\n\nA list of constraints on the unit cell parameters used in a  geometry optimisation or molecular dynamics simulation.  Example:\n%block cell_constraints\n1 1 3  ! a=b can vary but tied equal, c free to vary\n0 0 0  ! Fix alpha, beta and gamma\n%endblock cell_constraints\n\nDefault value: None, unless FIX_ALL_CELL is specified.\n", "key_level": "basic", "value_type": "block"}}